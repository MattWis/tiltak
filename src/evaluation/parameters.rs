use crate::position::num_square_symmetries;

pub const NUM_VALUE_FEATURES_4S: usize = 51;
pub const NUM_POLICY_FEATURES_4S: usize = 108;

pub const NUM_VALUE_FEATURES_5S: usize = 69;
pub const NUM_POLICY_FEATURES_5S: usize = 127;

pub const NUM_VALUE_FEATURES_6S: usize = 72;
pub const NUM_POLICY_FEATURES_6S: usize = 137;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_stack_psqt: &'a mut [f32],
    pub their_stack_psqt: &'a mut [f32],
    pub side_to_move: &'a mut [f32],
    pub flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub capstone_over_own_piece: &'a mut [f32],
    pub capstone_on_stack: &'a mut [f32],
    pub standing_stone_on_stack: &'a mut [f32],
    pub flat_stone_next_to_our_stack: &'a mut [f32],
    pub standing_stone_next_to_our_stack: &'a mut [f32],
    pub capstone_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control: &'a mut [f32],
    pub block_their_line: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>());

        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (their_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (side_to_move, coefficients) = coefficients.split_at_mut(3);
        let (flatstone_lead, coefficients) = coefficients.split_at_mut(3);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (capstone_over_own_piece, coefficients) = coefficients.split_at_mut(1);
        let (capstone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (flat_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (capstone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control, coefficients) = coefficients.split_at_mut(S + 1);
        let (block_their_line, coefficients) = coefficients.split_at_mut(S + 1);

        assert!(coefficients.is_empty());

        ValueFeatures {
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_stack_psqt,
            their_stack_psqt,
            side_to_move,
            flatstone_lead,
            i_number_of_groups,
            critical_squares,
            capstone_over_own_piece,
            capstone_on_stack,
            standing_stone_on_stack,
            flat_stone_next_to_our_stack,
            standing_stone_next_to_our_stack,
            capstone_next_to_our_stack,
            num_lines_occupied,
            line_control,
            block_their_line,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub decline_win: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_our_critical_square: &'a mut [f32],
    pub place_their_critical_square: &'a mut [f32],
    pub ignore_their_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub stack_movement_that_gives_us_top_pieces: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub recapture_stack_pure: &'a mut [f32],
    pub recapture_stack_impure: &'a mut [f32],
    pub continue_spread: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
    pub spread_that_connects_groups_to_win: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (decline_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_our_critical_square, coefficients) = coefficients.split_at_mut(1);
        let (place_their_critical_square, coefficients) = coefficients.split_at_mut(4);
        let (ignore_their_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (stack_movement_that_gives_us_top_pieces, coefficients) = coefficients.split_at_mut(6);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (recapture_stack_pure, coefficients) = coefficients.split_at_mut(3);
        let (recapture_stack_impure, coefficients) = coefficients.split_at_mut(3);
        let (continue_spread, coefficients) = coefficients.split_at_mut(3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(3);
        let (spread_that_connects_groups_to_win, coefficients) = coefficients.split_at_mut(1);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            move_role_bonus,
            stack_movement_that_gives_us_top_pieces,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    0.40710354,
    0.54004306,
    0.7314182,
    1.0928891,
    1.0292282,
    1.3468512,
    0.0060105007,
    0.0055509824,
    -0.00028526317,
    1.3862512,
    1.7173628,
    1.6419909,
    0.9690684,
    1.0156716,
    1.0867381,
    1.3008595,
    1.4003952,
    1.7866403,
    0.48352754,
    0.10772651,
    1.0677989,
    -0.2995102,
    -0.2784462,
    0.4824724,
    0.3578643,
    0.30005231,
    0.112963594,
    0.03649128,
    -0.0068652583,
    -0.0045327637,
    -0.007574806,
    -0.001304483,
    0.7344016,
    -0.012913749,
    -0.27687806,
    -0.00081042293,
    0.8332573,
    -1.0331386,
    -0.5144214,
    -0.005624555,
    0.71696895,
    -0.81962454,
    -0.5723752,
    0.25761572,
    1.1193179,
    0.005045411,
    -0.03437448,
    0.008928416,
    0.048655495,
    -0.0016141674,
    0.003347816,
];
#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    -1.9753354,
    0.80082893,
    0.76696056,
    -1.596112,
    -1.4735779,
    -0.29647985,
    0.37601605,
    -0.13056195,
    0.048303492,
    -0.15898462,
    0.04388426,
    0.11905619,
    0.17812023,
    0.3681456,
    0.009602453,
    -0.23682755,
    -0.13254745,
    0.007571606,
    0.009635687,
    -0.0014058612,
    0.01761561,
    -0.27590916,
    0.5590615,
    0.991015,
    -0.3518935,
    -0.33747926,
    -0.016792817,
    0.0045356196,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    0.24503656,
    -0.4875232,
    0.26542193,
    1.2791967,
    -0.78929627,
    -0.52177763,
    -0.29543862,
    0.9106606,
    -0.0057374667,
    0.00015021767,
    0.008557079,
    -0.0009557083,
    0.47164196,
    -0.10876084,
    -0.009191279,
    -0.68911946,
    -0.20810941,
    -0.00008111913,
    0.28825918,
    0.27054662,
    -0.008808966,
    0.36175418,
    0.23218067,
    -0.0049592447,
    0.9985712,
    0.5784028,
    0.002150652,
    -0.02513768,
    0.28258643,
    -0.004483435,
    0.7583606,
    0.90101403,
    0.008150065,
    -2.40142,
    -0.05413346,
    0.0040705632,
    1.8541436,
    0.7062359,
    1.0553765,
    0.008161059,
    0.8865846,
    -6.152259,
    -1.7887338,
    0.40835002,
    1.296659,
    0.35696003,
    0.23763083,
    0.3057407,
    0.113686025,
    -1.4294891,
    -1.366776,
    -0.0077824043,
    0.24284217,
    0.7996657,
    -2.5685933,
    -2.9879155,
    -0.4556964,
    -0.5208802,
    0.49908552,
    -0.14175898,
    -0.002353027,
    0.008927224,
    0.009418681,
    1.1588008,
    0.5885311,
    0.008915393,
    -0.6318976,
    -0.45884654,
    0.008046815,
    0.014982596,
    -0.2168912,
    -0.0008124877,
    1.0377661,
    1.6927203,
    0.81287056,
    1.564859,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    -0.00044795033,
    0.15347332,
    0.14927012,
    0.25764394,
    0.2447137,
    0.27844432,
    0.7183903,
    0.79589164,
    0.69361377,
    0.93700093,
    0.77688575,
    1.0438795,
    -0.47725853,
    0.023881366,
    0.10956399,
    0.6041755,
    0.7021375,
    0.9956894,
    1.1578636,
    1.1255516,
    1.2779299,
    1.2831495,
    1.311057,
    1.2934446,
    0.7101744,
    0.73263896,
    0.77619076,
    0.8653954,
    0.8186914,
    0.8584326,
    0.98251414,
    0.7959507,
    1.0613332,
    0.61214393,
    0.04162296,
    0.47685462,
    -0.18535407,
    -0.175548,
    0.025191614,
    0.31633365,
    0.044689283,
    0.08818814,
    -0.04582565,
    0.036502212,
    0.11076386,
    0.12404986,
    0.60829574,
    0.35141426,
    -0.032268483,
    -0.15010805,
    -0.15450484,
    0.7011735,
    -0.77606714,
    -0.432654,
    -0.1280988,
    0.12062097,
    0.5066281,
    -1.0205822,
    -0.7606904,
    -0.18055946,
    0.6164267,
    1.3433626,
    0.0029393125,
    0.012231762,
    -0.07691176,
    0.14723985,
    0.103527844,
    0.08759902,
    -0.0380222,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    -1.9905095,
    1.096357,
    0.39634848,
    -1.6180525,
    -1.3751211,
    -0.07271127,
    0.20516771,
    -0.26105353,
    0.09735942,
    -0.1378682,
    0.040697653,
    -0.042686425,
    0.05075443,
    0.2457095,
    0.49273637,
    0.14837937,
    0.0456949,
    0.17355289,
    -0.19145899,
    -0.344743,
    -0.1574034,
    -0.22389531,
    0.006328902,
    -1.7835386,
    -1.3044544,
    -0.86946356,
    -0.08791815,
    0.8093846,
    3.624926,
    -0.052992526,
    -0.26711258,
    0.17883341,
    0.73317194,
    1.2704169,
    -0.4280208,
    -0.44154665,
    -0.35211107,
    -0.26834607,
    -0.007171293,
    -0.081827715,
    -0.39498034,
    0.09615762,
    1.4250174,
    -0.2501211,
    0.37029338,
    -0.13202596,
    0.12943766,
    0.66505194,
    0.87093645,
    -0.3746313,
    -0.5646526,
    -0.6459462,
    -0.10842257,
    0.23439395,
    -0.014367993,
    -0.7458131,
    -0.27864048,
    0.8686205,
    0.97645444,
    0.52522284,
    0.046693675,
    0.2772255,
    -0.02396434,
    -0.45228818,
    -0.2630224,
    0.12755345,
    -0.05016106,
    -0.009140104,
    0.4812853,
    0.33494174,
    -0.41927853,
    1.3532034,
    0.059297983,
    0.74891293,
    -0.09834215,
    0.13959552,
    0.14370109,
    0.3981822,
    0.978337,
    0.819315,
    -0.2846619,
    -0.34393936,
    0.09532111,
    1.8372705,
    0.41665533,
    3.0010078,
    2.1616373,
    0.81234425,
    -4.0760827,
    -1.7966951,
    0.681103,
    1.1698775,
    0.23399794,
    0.23585935,
    0.13232872,
    0.33868417,
    -0.700852,
    -0.5141411,
    -0.3839984,
    -0.009096119,
    0.3359006,
    -0.6379857,
    -0.9111463,
    -0.9648065,
    -1.1692203,
    0.46283722,
    -0.0040046014,
    -0.12914908,
    -0.05295854,
    -0.015053998,
    0.081553526,
    0.51240003,
    -0.09093159,
    -0.1475127,
    1.5666057,
    0.49401587,
    1.0367358,
    -0.295055,
    -0.023037069,
    0.25159872,
    0.09765756,
    0.041841168,
    -0.2620034,
    0.7999332,
    2.4044707,
    1.194649,
    2.5230334,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.046171084,
    0.18331811,
    0.22388674,
    0.40089765,
    0.39143583,
    0.38337028,
    0.18175879,
    0.9748611,
    0.8954859,
    1.0704179,
    1.1226778,
    1.2997634,
    -0.12113264,
    0.23441482,
    0.47019416,
    0.74714774,
    0.8460779,
    1.1941108,
    1.1458044,
    1.4042677,
    1.4908792,
    1.3719292,
    1.5380452,
    1.4982508,
    0.6325053,
    0.91657126,
    0.88002807,
    0.9217417,
    0.91336334,
    0.91496414,
    1.0705668,
    0.90843934,
    1.0134091,
    0.85562843,
    0.34161913,
    0.43768582,
    -0.30401027,
    -0.19501288,
    0.013981101,
    0.28825554,
    0.31932393,
    0.16409515,
    -0.06394048,
    0.07299698,
    0.18443385,
    0.8699935,
    0.6562437,
    0.49707237,
    -0.042350415,
    -0.1975843,
    -0.20159936,
    0.8737253,
    -0.76951206,
    -0.48211715,
    -0.27948415,
    -0.034151398,
    0.19642136,
    0.49798742,
    -1.2477565,
    -0.97310567,
    -0.4381552,
    0.22319506,
    0.91539365,
    1.520835,
    0.0074355192,
    0.046738762,
    0.08225036,
    -0.0037264838,
    0.101646885,
    0.06553965,
    0.19098015,
    0.18686743,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    -2.5039961,
    1.375065,
    -0.05876627,
    -1.7180839,
    -1.4037749,
    -0.17846842,
    0.37544665,
    -0.3074317,
    0.08806355,
    -0.014498456,
    0.059958268,
    -0.31960905,
    -0.1070914,
    -0.08238243,
    0.53537875,
    0.44863167,
    0.23680456,
    -0.13523254,
    -0.20462687,
    -0.29956657,
    -0.11712594,
    -0.20800607,
    0.10586238,
    -0.48170853,
    -0.77285564,
    -0.39137915,
    -0.6267907,
    0.31809768,
    2.4295204,
    0.0075507336,
    -0.33052465,
    -0.12783366,
    0.24432611,
    0.6990766,
    0.88047135,
    -0.35850993,
    -0.3807413,
    -0.3376483,
    -0.29836273,
    -0.35379472,
    -0.004590723,
    -0.15426378,
    -0.12679566,
    0.46230507,
    0.88292015,
    0.14931796,
    -0.17810722,
    0.36241627,
    -0.09617454,
    -0.028888963,
    0.2957796,
    0.5845747,
    0.29391333,
    -0.12227226,
    -0.45241785,
    -0.61604947,
    -0.43066487,
    -0.1718941,
    0.08273514,
    -0.9398726,
    -0.79177094,
    -0.5287804,
    0.37268907,
    1.0556358,
    1.8531284,
    0.6117293,
    0.24409622,
    0.5074034,
    0.12955108,
    -0.52802527,
    0.46971643,
    0.43141,
    -0.30291462,
    -0.09478132,
    0.17288394,
    0.48667356,
    -0.1368011,
    1.8000047,
    0.19239895,
    0.85994923,
    -0.17112578,
    -0.14700496,
    -0.24087037,
    0.55767846,
    0.9549567,
    1.3093545,
    -0.11626127,
    -0.17791967,
    -0.18366662,
    2.200786,
    -0.0900596,
    3.5841296,
    3.2248812,
    0.7941134,
    -3.3653135,
    -1.5539519,
    0.80160075,
    1.313354,
    0.4500906,
    0.43915924,
    0.10952447,
    0.40843955,
    -0.6938815,
    0.033896968,
    0.01310608,
    0.58930415,
    -0.20786586,
    -0.44920662,
    -0.9511982,
    -0.77389497,
    -0.94153386,
    0.41130963,
    -0.00925822,
    -0.012265364,
    -0.11521195,
    -0.030057233,
    -0.060727283,
    -0.037519787,
    -0.27379662,
    -0.025436407,
    0.27939066,
    -0.28541133,
    -0.19465567,
    -0.09524735,
    1.7694919,
    0.98535204,
    1.4078737,
    -0.12338979,
    0.056578968,
    0.30071604,
    0.3411414,
    0.011098133,
    -0.2192312,
    0.8537787,
    2.4208019,
    1.2284822,
    3.4284155,
];
