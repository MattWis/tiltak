use crate::position::num_square_symmetries;

pub const NUM_VALUE_FEATURES_4S: usize = 51;
pub const NUM_POLICY_FEATURES_4S: usize = 130;

pub const NUM_VALUE_FEATURES_5S: usize = 69;
pub const NUM_POLICY_FEATURES_5S: usize = 149;

pub const NUM_VALUE_FEATURES_6S: usize = 72;
pub const NUM_POLICY_FEATURES_6S: usize = 159;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_stack_psqt: &'a mut [f32],
    pub their_stack_psqt: &'a mut [f32],
    pub side_to_move: &'a mut [f32],
    pub flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub capstone_over_own_piece: &'a mut [f32],
    pub capstone_on_stack: &'a mut [f32],
    pub standing_stone_on_stack: &'a mut [f32],
    pub flat_stone_next_to_our_stack: &'a mut [f32],
    pub standing_stone_next_to_our_stack: &'a mut [f32],
    pub capstone_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control: &'a mut [f32],
    pub block_their_line: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>());

        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (their_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (side_to_move, coefficients) = coefficients.split_at_mut(3);
        let (flatstone_lead, coefficients) = coefficients.split_at_mut(3);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (capstone_over_own_piece, coefficients) = coefficients.split_at_mut(1);
        let (capstone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (flat_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (capstone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control, coefficients) = coefficients.split_at_mut(S + 1);
        let (block_their_line, coefficients) = coefficients.split_at_mut(S + 1);

        assert!(coefficients.is_empty());

        ValueFeatures {
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_stack_psqt,
            their_stack_psqt,
            side_to_move,
            flatstone_lead,
            i_number_of_groups,
            critical_squares,
            capstone_over_own_piece,
            capstone_on_stack,
            standing_stone_on_stack,
            flat_stone_next_to_our_stack,
            standing_stone_next_to_our_stack,
            capstone_next_to_our_stack,
            num_lines_occupied,
            line_control,
            block_their_line,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub decline_win: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_our_critical_square: &'a mut [f32],
    pub place_their_critical_square: &'a mut [f32],
    pub ignore_their_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub attack_strong_stack_with_wall: &'a mut [f32],
    pub attack_strong_stack_with_cap: &'a mut [f32],
    pub attack_last_movement: &'a mut [f32],
    pub place_last_movement: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub stack_movement_that_gives_us_top_pieces: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub recapture_stack_pure: &'a mut [f32],
    pub recapture_stack_impure: &'a mut [f32],
    pub move_last_placement: &'a mut [f32],
    pub continue_spread: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
    pub spread_that_connects_groups_to_win: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (decline_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_our_critical_square, coefficients) = coefficients.split_at_mut(1);
        let (place_their_critical_square, coefficients) = coefficients.split_at_mut(4);
        let (ignore_their_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (attack_strong_stack_with_wall, coefficients) = coefficients.split_at_mut(6);
        let (attack_strong_stack_with_cap, coefficients) = coefficients.split_at_mut(6);
        let (attack_last_movement, coefficients) = coefficients.split_at_mut(4);
        let (place_last_movement, coefficients) = coefficients.split_at_mut(3);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (stack_movement_that_gives_us_top_pieces, coefficients) = coefficients.split_at_mut(6);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (recapture_stack_pure, coefficients) = coefficients.split_at_mut(3);
        let (recapture_stack_impure, coefficients) = coefficients.split_at_mut(3);
        let (move_last_placement, coefficients) = coefficients.split_at_mut(3);
        let (continue_spread, coefficients) = coefficients.split_at_mut(3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(3);
        let (spread_that_connects_groups_to_win, coefficients) = coefficients.split_at_mut(1);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            move_role_bonus,
            stack_movement_that_gives_us_top_pieces,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            move_last_placement,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    0.57654625,
    0.7234519,
    0.9947288,
    1.3619405,
    1.8534485,
    2.3675127,
    0.002932434,
    -0.0025715088,
    -0.00047107227,
    1.9982809,
    2.0331223,
    2.2268746,
    1.2895253,
    1.425842,
    1.6549771,
    1.735017,
    1.6928818,
    2.3276055,
    0.5782846,
    0.23609775,
    1.4875325,
    -0.20662633,
    0.06555736,
    0.06037165,
    0.35478404,
    -0.043982003,
    0.07589103,
    0.0114656,
    0.005802648,
    0.005024814,
    0.0038007405,
    -0.008236115,
    1.1429316,
    0.015894145,
    -0.27121583,
    -0.0027140165,
    1.1204548,
    -1.4377198,
    -0.6954974,
    0.07622381,
    0.9358552,
    -1.1236336,
    -0.7948103,
    0.34426185,
    1.5628102,
    -0.005560641,
    -0.036541518,
    -0.0077532027,
    0.12844211,
    -0.0055643534,
    -0.0015320918,
];
#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    -3.9657896,
    1.4110678,
    1.0998982,
    -3.1612859,
    -3.3797283,
    0.22887644,
    0.46740365,
    -0.25038686,
    0.19303164,
    -0.16947459,
    0.15422852,
    0.06293144,
    0.16235097,
    0.43227813,
    -0.38303038,
    -0.504268,
    0.21411678,
    0.007571606,
    0.009635687,
    -0.0014058612,
    0.0085868295,
    -0.27475312,
    0.46439883,
    1.078042,
    0.020157898,
    0.14288536,
    0.055918362,
    -1.5474207,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    0.14159878,
    -0.38050216,
    0.3239574,
    1.2015599,
    -0.7297661,
    -0.6360258,
    -0.5853736,
    0.6284847,
    -0.0057374667,
    0.00015021767,
    0.008557079,
    -0.0009557083,
    0.6104631,
    -0.5925414,
    -0.009191279,
    -1.3853506,
    0.5065972,
    -0.00008111913,
    0.45035902,
    0.8281232,
    -0.008808966,
    0.14468262,
    -0.81799924,
    -0.0049592447,
    0.8167471,
    1.2574946,
    0.002150652,
    0.1963947,
    -0.7948367,
    -0.004483435,
    0.17575556,
    0.4369178,
    0.008150065,
    -0.84050864,
    -0.34566236,
    0.0040705632,
    2.4563792,
    0.23108627,
    0.9188401,
    0.008161059,
    0.79233116,
    -3.536681,
    -1.7433494,
    0.24274868,
    1.396689,
    0.43048444,
    0.28698713,
    0.27532858,
    0.58915645,
    0.18701936,
    0.33074096,
    -0.3476396,
    0.54176253,
    0.008410923,
    0.0043121455,
    -0.008000903,
    0.0010137418,
    -0.006815267,
    0.0031001903,
    -0.002478423,
    -0.002353027,
    0.35292476,
    0.07396798,
    -0.007463541,
    -0.009312019,
    0.06629895,
    -0.21437466,
    0.0035254955,
    -1.3564991,
    -1.2744789,
    0.008508706,
    -0.04956134,
    0.8928778,
    -1.5557747,
    0.62927735,
    -1.0346689,
    0.24117747,
    0.5185278,
    -0.20043422,
    -0.005868571,
    -0.0075792954,
    0.00952702,
    1.4246035,
    0.761231,
    -0.0077517964,
    -1.1132826,
    0.28384545,
    -0.0027733874,
    0.427133,
    1.0458082,
    0.001523626,
    0.120106295,
    -0.09654278,
    -0.0018659113,
    0.7107393,
    2.2507515,
    0.70542514,
    2.967115,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    0.041438956,
    0.18446095,
    0.1868889,
    0.36185566,
    0.2977145,
    0.24137947,
    1.0061449,
    1.2283852,
    1.2568935,
    1.5351268,
    1.5653604,
    1.5840644,
    -0.34000713,
    0.14839143,
    0.17265277,
    0.821358,
    1.0685441,
    1.3443707,
    1.565895,
    1.6729121,
    1.7397277,
    1.7779435,
    1.8452426,
    1.9811568,
    0.91039133,
    0.993802,
    1.0050044,
    1.0602405,
    1.0913749,
    1.1558495,
    1.4146647,
    1.1090266,
    1.4144582,
    0.8148615,
    -0.0011314729,
    0.50623226,
    -0.24223273,
    -0.17486069,
    -0.062269866,
    0.31759375,
    0.05862558,
    0.14427549,
    0.014593944,
    0.073600724,
    0.17297962,
    1.0740496,
    0.8490231,
    0.39128616,
    -0.035940174,
    -0.24668843,
    -0.2195351,
    1.0292486,
    -1.1224568,
    -0.664381,
    -0.23911083,
    0.23164476,
    0.7603211,
    -1.5782015,
    -1.1137623,
    -0.18412527,
    0.926742,
    1.9477305,
    0.0022945618,
    0.02982622,
    0.011772434,
    0.105311766,
    0.23329736,
    0.11333126,
    0.13913,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    -4.755364,
    1.1311738,
    0.58556867,
    -3.4021764,
    -3.1373155,
    0.04412974,
    0.458972,
    -0.30885246,
    0.14668843,
    -0.14313453,
    0.0872659,
    -0.1082516,
    0.16851811,
    0.065404534,
    0.3631787,
    0.06401016,
    -0.104257725,
    -0.21088494,
    -0.31087786,
    -0.27435446,
    0.08521605,
    0.14504233,
    0.24366389,
    -1.4423789,
    -1.3047569,
    -0.94594556,
    0.4572711,
    1.0609539,
    2.7472804,
    0.013866621,
    -0.27202812,
    -0.0010028178,
    0.4315712,
    0.7059404,
    -0.20276293,
    -0.14279109,
    -0.023965461,
    -0.047358107,
    -0.24944656,
    0.013453558,
    0.04208832,
    0.5729235,
    1.3989291,
    -0.8662238,
    0.28540576,
    -0.17574224,
    0.02379508,
    0.37689117,
    0.40937334,
    -0.33514708,
    -0.4670903,
    -0.4427345,
    0.05848252,
    0.5580883,
    -0.5805978,
    -0.70629185,
    -0.30271703,
    0.4686727,
    2.294098,
    0.60297436,
    0.11505742,
    1.4712111,
    -0.02313266,
    -0.7007273,
    -2.5861368,
    0.36617997,
    -0.029973844,
    -0.6797968,
    0.25856647,
    0.19340551,
    0.5791781,
    1.587876,
    0.3253362,
    1.4125295,
    -0.15290302,
    -0.17460127,
    -2.217749,
    0.4083747,
    0.71800256,
    1.4114511,
    -0.22816692,
    -0.58337367,
    -0.45859587,
    2.230897,
    0.21277095,
    2.1068072,
    2.6636884,
    0.7823231,
    -4.1001625,
    -1.795641,
    0.39795363,
    1.4063269,
    0.32883975,
    0.41488165,
    0.15165795,
    0.30999684,
    0.27579188,
    0.3322012,
    -0.046668332,
    0.3830913,
    -0.015490389,
    0.39347458,
    0.2111288,
    -0.9909295,
    0.12670685,
    0.4658484,
    -0.28010443,
    -0.16104476,
    0.27260667,
    -0.04851852,
    0.004360006,
    0.009378757,
    0.33778733,
    0.092597574,
    1.1445029,
    -0.93961936,
    -0.5925652,
    -0.45683023,
    0.20834558,
    0.2884825,
    -0.9228111,
    -0.14170785,
    -1.2900378,
    -0.25622728,
    0.44415691,
    -0.028698953,
    -0.14867443,
    -0.0018671652,
    -0.004052444,
    -0.027956044,
    0.35590026,
    -1.2162863,
    -0.5925793,
    1.9376279,
    1.0999765,
    1.5152308,
    -0.39294106,
    1.1180122,
    1.2197584,
    0.5836516,
    1.1542743,
    1.2598281,
    0.25476572,
    0.25285935,
    -0.3309673,
    0.12298836,
    2.8491154,
    1.186176,
    3.5280263,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.046171084,
    0.18331811,
    0.22388674,
    0.40089765,
    0.39143583,
    0.38337028,
    0.18175879,
    0.9748611,
    0.8954859,
    1.0704179,
    1.1226778,
    1.2997634,
    -0.12113264,
    0.23441482,
    0.47019416,
    0.74714774,
    0.8460779,
    1.1941108,
    1.1458044,
    1.4042677,
    1.4908792,
    1.3719292,
    1.5380452,
    1.4982508,
    0.6325053,
    0.91657126,
    0.88002807,
    0.9217417,
    0.91336334,
    0.91496414,
    1.0705668,
    0.90843934,
    1.0134091,
    0.85562843,
    0.34161913,
    0.43768582,
    -0.30401027,
    -0.19501288,
    0.013981101,
    0.28825554,
    0.31932393,
    0.16409515,
    -0.06394048,
    0.07299698,
    0.18443385,
    0.8699935,
    0.6562437,
    0.49707237,
    -0.042350415,
    -0.1975843,
    -0.20159936,
    0.8737253,
    -0.76951206,
    -0.48211715,
    -0.27948415,
    -0.034151398,
    0.19642136,
    0.49798742,
    -1.2477565,
    -0.97310567,
    -0.4381552,
    0.22319506,
    0.91539365,
    1.520835,
    0.0074355192,
    0.046738762,
    0.08225036,
    -0.0037264838,
    0.101646885,
    0.06553965,
    0.19098015,
    0.18686743,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    -2.5363762,
    1.2830093,
    -0.056601353,
    -1.8233072,
    -1.389441,
    -0.20600548,
    0.35326615,
    -0.3318612,
    0.08232668,
    -0.044547852,
    0.059150666,
    -0.31771863,
    -0.1044918,
    -0.08084279,
    0.52813613,
    0.44003242,
    0.22826046,
    -0.08163802,
    -0.16799764,
    -0.25018254,
    -0.12437119,
    -0.18087704,
    0.17151965,
    -0.5071052,
    -0.75443524,
    -0.35563612,
    -0.6228442,
    0.3222496,
    2.3377194,
    0.0031735783,
    -0.3306406,
    -0.12859213,
    0.23733155,
    0.6819427,
    0.87313485,
    -0.2893797,
    -0.2807815,
    -0.25203586,
    -0.18387881,
    -0.27115247,
    -0.006122046,
    -0.1418359,
    -0.11581925,
    0.43501002,
    0.79398143,
    0.15294796,
    -0.1987874,
    0.36656997,
    -0.09263396,
    -0.024373908,
    0.294958,
    0.57044715,
    0.25993708,
    -0.14369164,
    -0.42071584,
    -0.5215893,
    -0.3378872,
    -0.035183035,
    0.19880106,
    -0.8978262,
    -0.7565502,
    -0.52139324,
    0.313325,
    0.9492659,
    1.8243299,
    0.60696286,
    0.19221446,
    0.48338398,
    0.13607384,
    -0.5482307,
    0.4366965,
    0.43313438,
    -0.2543868,
    -0.08383881,
    0.1722518,
    0.45154488,
    -0.16469261,
    1.7909608,
    0.25799772,
    0.8234777,
    -0.16886096,
    -0.2790987,
    -0.26581666,
    0.54023874,
    1.1083267,
    1.2673566,
    -0.12066804,
    -0.46362242,
    -0.19852792,
    2.173877,
    -0.11502193,
    3.1317022,
    3.1815207,
    0.78471404,
    -3.359912,
    -1.5387146,
    0.79572767,
    1.3394706,
    0.44752908,
    0.45481354,
    0.10425271,
    0.40930256,
    0.25026223,
    -0.04020394,
    0.12922546,
    0.03693583,
    -0.014112658,
    0.24559191,
    -0.28917158,
    -0.2873406,
    -0.027899379,
    0.008762036,
    -0.23536916,
    -0.031070815,
    0.17413865,
    -0.08546163,
    0.0054334905,
    -0.006010456,
    0.23914233,
    0.026068522,
    1.2989554,
    -0.64913064,
    -0.13109483,
    0.016327247,
    0.4276375,
    -0.12069731,
    -0.45514718,
    -0.8919352,
    -0.7285476,
    -0.89966303,
    0.39984635,
    -0.009531373,
    -0.0123158265,
    -0.1130694,
    -0.022985782,
    -0.050109204,
    -0.031654518,
    -0.2738603,
    -0.042858038,
    0.28402397,
    -0.30451792,
    -0.17504573,
    -0.09357489,
    1.7960848,
    1.1750553,
    1.4682785,
    -0.12700213,
    0.10437901,
    0.3458779,
    0.50783014,
    1.207533,
    1.1453148,
    0.38085297,
    0.1985917,
    -0.20749687,
    0.84237814,
    2.41643,
    1.2117652,
    3.4018445,
];
