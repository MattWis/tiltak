use crate::position::num_square_symmetries;

pub const NUM_VALUE_FEATURES_4S: usize = 51;
pub const NUM_POLICY_FEATURES_4S: usize = 127;

pub const NUM_VALUE_FEATURES_5S: usize = 69;
pub const NUM_POLICY_FEATURES_5S: usize = 146;

pub const NUM_VALUE_FEATURES_6S: usize = 72;
pub const NUM_POLICY_FEATURES_6S: usize = 156;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_stack_psqt: &'a mut [f32],
    pub their_stack_psqt: &'a mut [f32],
    pub side_to_move: &'a mut [f32],
    pub flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub capstone_over_own_piece: &'a mut [f32],
    pub capstone_on_stack: &'a mut [f32],
    pub standing_stone_on_stack: &'a mut [f32],
    pub flat_stone_next_to_our_stack: &'a mut [f32],
    pub standing_stone_next_to_our_stack: &'a mut [f32],
    pub capstone_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control: &'a mut [f32],
    pub block_their_line: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>());

        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (their_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (side_to_move, coefficients) = coefficients.split_at_mut(3);
        let (flatstone_lead, coefficients) = coefficients.split_at_mut(3);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (capstone_over_own_piece, coefficients) = coefficients.split_at_mut(1);
        let (capstone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (flat_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (capstone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control, coefficients) = coefficients.split_at_mut(S + 1);
        let (block_their_line, coefficients) = coefficients.split_at_mut(S + 1);

        assert!(coefficients.is_empty());

        ValueFeatures {
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_stack_psqt,
            their_stack_psqt,
            side_to_move,
            flatstone_lead,
            i_number_of_groups,
            critical_squares,
            capstone_over_own_piece,
            capstone_on_stack,
            standing_stone_on_stack,
            flat_stone_next_to_our_stack,
            standing_stone_next_to_our_stack,
            capstone_next_to_our_stack,
            num_lines_occupied,
            line_control,
            block_their_line,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub decline_win: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_our_critical_square: &'a mut [f32],
    pub place_their_critical_square: &'a mut [f32],
    pub ignore_their_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub attack_strong_stack_with_wall: &'a mut [f32],
    pub attack_strong_stack_with_cap: &'a mut [f32],
    pub attack_last_movement: &'a mut [f32],
    pub place_last_movement: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub stack_movement_that_gives_us_top_pieces: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub recapture_stack_pure: &'a mut [f32],
    pub recapture_stack_impure: &'a mut [f32],
    pub continue_spread: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
    pub spread_that_connects_groups_to_win: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (decline_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_our_critical_square, coefficients) = coefficients.split_at_mut(1);
        let (place_their_critical_square, coefficients) = coefficients.split_at_mut(4);
        let (ignore_their_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (attack_strong_stack_with_wall, coefficients) = coefficients.split_at_mut(6);
        let (attack_strong_stack_with_cap, coefficients) = coefficients.split_at_mut(6);
        let (attack_last_movement, coefficients) = coefficients.split_at_mut(4);
        let (place_last_movement, coefficients) = coefficients.split_at_mut(3);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (stack_movement_that_gives_us_top_pieces, coefficients) = coefficients.split_at_mut(6);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (recapture_stack_pure, coefficients) = coefficients.split_at_mut(3);
        let (recapture_stack_impure, coefficients) = coefficients.split_at_mut(3);
        let (continue_spread, coefficients) = coefficients.split_at_mut(3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(3);
        let (spread_that_connects_groups_to_win, coefficients) = coefficients.split_at_mut(1);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            place_last_movement,
            move_role_bonus,
            stack_movement_that_gives_us_top_pieces,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    0.40710354,
    0.54004306,
    0.7314182,
    1.0928891,
    1.0292282,
    1.3468512,
    0.0060105007,
    0.0055509824,
    -0.00028526317,
    1.3862512,
    1.7173628,
    1.6419909,
    0.9690684,
    1.0156716,
    1.0867381,
    1.3008595,
    1.4003952,
    1.7866403,
    0.48352754,
    0.10772651,
    1.0677989,
    -0.2995102,
    -0.2784462,
    0.4824724,
    0.3578643,
    0.30005231,
    0.112963594,
    0.03649128,
    -0.0068652583,
    -0.0045327637,
    -0.007574806,
    -0.001304483,
    0.7344016,
    -0.012913749,
    -0.27687806,
    -0.00081042293,
    0.8332573,
    -1.0331386,
    -0.5144214,
    -0.005624555,
    0.71696895,
    -0.81962454,
    -0.5723752,
    0.25761572,
    1.1193179,
    0.005045411,
    -0.03437448,
    0.008928416,
    0.048655495,
    -0.0016141674,
    0.003347816,
];
#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    -1.9722632,
    0.65373236,
    0.7593758,
    -1.6659392,
    -1.5881503,
    -0.28323892,
    0.32265666,
    -0.2575198,
    0.068128854,
    -0.24177688,
    0.07068112,
    0.11998175,
    0.17586803,
    0.35374442,
    -0.044301793,
    -0.31096065,
    -0.08829344,
    0.007571606,
    0.009635687,
    -0.0014058612,
    0.016670933,
    -0.2769712,
    0.54868865,
    0.97194284,
    -0.35734764,
    -0.3172467,
    -0.18445061,
    -0.010154184,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    0.24316615,
    -0.48893443,
    0.2547592,
    1.2616861,
    -0.6825813,
    -0.48937157,
    -0.41468412,
    0.72321886,
    -0.0057374667,
    0.00015021767,
    0.008557079,
    -0.0009557083,
    0.41184318,
    0.009049027,
    -0.009191279,
    -0.5679118,
    -0.18592466,
    -0.00008111913,
    0.33931217,
    0.23395908,
    -0.008808966,
    0.28967524,
    -0.060434688,
    -0.0049592447,
    0.99789923,
    0.77059513,
    0.002150652,
    -0.0022562114,
    -0.097233534,
    -0.004483435,
    0.6701261,
    0.76660144,
    0.008150065,
    -2.1261382,
    -0.6458057,
    0.0040705632,
    1.8459386,
    0.6669178,
    1.1450883,
    0.008161059,
    0.8864814,
    -6.2777643,
    -1.7667819,
    0.4030112,
    1.3291869,
    0.35873553,
    0.25878525,
    0.29554605,
    0.3374059,
    0.17144087,
    0.30249128,
    -0.16096579,
    0.25132766,
    0.008410923,
    0.0043121455,
    -0.008000903,
    0.0010137418,
    -0.006815267,
    0.0031001903,
    -0.002478423,
    -0.002353027,
    0.2890782,
    -0.04897973,
    -0.007463541,
    -0.009312019,
    0.2907089,
    -0.26463556,
    0.0035254955,
    -1.4644727,
    -1.4017845,
    0.008508706,
    0.2770839,
    0.8002258,
    -2.6549065,
    -3.0737104,
    -0.4973799,
    -0.59195304,
    0.49915674,
    -0.14201456,
    -0.005868571,
    -0.0075792954,
    0.00952702,
    1.1586223,
    0.5883142,
    -0.0077517964,
    -0.6437853,
    -0.44387114,
    -0.0027733874,
    0.015181496,
    -0.21737432,
    0.001523626,
    1.0470498,
    1.6974641,
    0.81324023,
    1.5557067,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    -0.00044795033,
    0.15347332,
    0.14927012,
    0.25764394,
    0.2447137,
    0.27844432,
    0.7183903,
    0.79589164,
    0.69361377,
    0.93700093,
    0.77688575,
    1.0438795,
    -0.47725853,
    0.023881366,
    0.10956399,
    0.6041755,
    0.7021375,
    0.9956894,
    1.1578636,
    1.1255516,
    1.2779299,
    1.2831495,
    1.311057,
    1.2934446,
    0.7101744,
    0.73263896,
    0.77619076,
    0.8653954,
    0.8186914,
    0.8584326,
    0.98251414,
    0.7959507,
    1.0613332,
    0.61214393,
    0.04162296,
    0.47685462,
    -0.18535407,
    -0.175548,
    0.025191614,
    0.31633365,
    0.044689283,
    0.08818814,
    -0.04582565,
    0.036502212,
    0.11076386,
    0.12404986,
    0.60829574,
    0.35141426,
    -0.032268483,
    -0.15010805,
    -0.15450484,
    0.7011735,
    -0.77606714,
    -0.432654,
    -0.1280988,
    0.12062097,
    0.5066281,
    -1.0205822,
    -0.7606904,
    -0.18055946,
    0.6164267,
    1.3433626,
    0.0029393125,
    0.012231762,
    -0.07691176,
    0.14723985,
    0.103527844,
    0.08759902,
    -0.0380222,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    -2.0091252,
    1.0088595,
    0.3896161,
    -1.7256492,
    -1.4050723,
    -0.097502306,
    0.19696663,
    -0.28135788,
    0.10099354,
    -0.15154506,
    0.041943878,
    -0.040670145,
    0.05310108,
    0.24565925,
    0.4901106,
    0.14611536,
    0.040313214,
    0.14129528,
    -0.16255333,
    -0.29114106,
    -0.10478804,
    -0.20157208,
    -0.0012498191,
    -1.7598779,
    -1.2834656,
    -0.8635254,
    -0.10158234,
    0.8015105,
    3.5917385,
    -0.05612367,
    -0.26847562,
    0.1761607,
    0.7249826,
    1.2738544,
    -0.33728045,
    -0.3441716,
    -0.3116544,
    -0.25359797,
    -0.015271909,
    -0.08155119,
    -0.3926914,
    0.094827764,
    1.4434158,
    -0.27803364,
    0.37209475,
    -0.13041401,
    0.13046664,
    0.6615761,
    0.85805315,
    -0.33100522,
    -0.54671484,
    -0.5650641,
    -0.04836086,
    0.2671059,
    -0.0009737815,
    -0.74497217,
    -0.29732528,
    0.86892825,
    0.9723182,
    0.5224203,
    0.0055366275,
    0.25869265,
    -0.01610073,
    -0.4268025,
    -0.26644337,
    0.12828316,
    -0.033427622,
    0.0014847842,
    0.48081118,
    0.2251173,
    -0.40952098,
    1.3527765,
    0.07911071,
    0.7591528,
    -0.0967402,
    0.051818237,
    0.13794816,
    0.38829115,
    0.9299206,
    0.7765493,
    -0.28429416,
    -0.5542143,
    0.06304335,
    1.822959,
    0.4062587,
    2.6427388,
    2.0866005,
    0.812209,
    -4.0756474,
    -1.789329,
    0.67746633,
    1.1863971,
    0.23107746,
    0.24470371,
    0.12899683,
    0.33337513,
    0.18600187,
    0.18650104,
    -0.0035053296,
    0.18582189,
    -0.02151391,
    0.37953004,
    0.25224072,
    -0.077040546,
    0.036278963,
    -0.009524043,
    -0.18205114,
    -0.14583439,
    0.20586716,
    -0.0685054,
    0.004360006,
    0.009378757,
    0.120698996,
    0.04258568,
    0.5471153,
    -0.70023245,
    -0.51379097,
    -0.38378757,
    -0.010394961,
    0.33672842,
    -0.6422214,
    -0.9079804,
    -0.96068364,
    -1.1761509,
    0.4628769,
    -0.003974317,
    -0.12911212,
    -0.05297194,
    -0.015176999,
    0.08254259,
    0.518635,
    -0.0873046,
    -0.15313011,
    1.5663252,
    0.49440095,
    1.0369858,
    -0.29851946,
    -0.012962712,
    0.25453433,
    0.097741105,
    0.040596858,
    -0.2619348,
    0.809226,
    2.3972492,
    1.1945612,
    2.513152,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.046171084,
    0.18331811,
    0.22388674,
    0.40089765,
    0.39143583,
    0.38337028,
    0.18175879,
    0.9748611,
    0.8954859,
    1.0704179,
    1.1226778,
    1.2997634,
    -0.12113264,
    0.23441482,
    0.47019416,
    0.74714774,
    0.8460779,
    1.1941108,
    1.1458044,
    1.4042677,
    1.4908792,
    1.3719292,
    1.5380452,
    1.4982508,
    0.6325053,
    0.91657126,
    0.88002807,
    0.9217417,
    0.91336334,
    0.91496414,
    1.0705668,
    0.90843934,
    1.0134091,
    0.85562843,
    0.34161913,
    0.43768582,
    -0.30401027,
    -0.19501288,
    0.013981101,
    0.28825554,
    0.31932393,
    0.16409515,
    -0.06394048,
    0.07299698,
    0.18443385,
    0.8699935,
    0.6562437,
    0.49707237,
    -0.042350415,
    -0.1975843,
    -0.20159936,
    0.8737253,
    -0.76951206,
    -0.48211715,
    -0.27948415,
    -0.034151398,
    0.19642136,
    0.49798742,
    -1.2477565,
    -0.97310567,
    -0.4381552,
    0.22319506,
    0.91539365,
    1.520835,
    0.0074355192,
    0.046738762,
    0.08225036,
    -0.0037264838,
    0.101646885,
    0.06553965,
    0.19098015,
    0.18686743,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    -2.5297825,
    1.2829368,
    -0.057017397,
    -1.8332316,
    -1.3984345,
    -0.20675555,
    0.35323498,
    -0.33197933,
    0.082319744,
    -0.04459772,
    0.05914127,
    -0.31764978,
    -0.1044079,
    -0.08076089,
    0.5282389,
    0.44013706,
    0.22835708,
    -0.08151046,
    -0.16825816,
    -0.250118,
    -0.12496676,
    -0.18100694,
    0.17169772,
    -0.5194766,
    -0.7539694,
    -0.35468316,
    -0.6242386,
    0.32840094,
    2.3441982,
    0.0033300468,
    -0.33047616,
    -0.12841582,
    0.23752671,
    0.6821461,
    0.8733192,
    -0.2892785,
    -0.28067076,
    -0.25197735,
    -0.18394448,
    -0.27255628,
    -0.006156393,
    -0.14320028,
    -0.11688636,
    0.43415758,
    0.7972084,
    0.15563393,
    -0.2008532,
    0.3663525,
    -0.09285442,
    -0.024582572,
    0.29477754,
    0.5703566,
    0.2619356,
    -0.14386433,
    -0.42118472,
    -0.52182204,
    -0.33808553,
    -0.03528149,
    0.19873938,
    -0.9000631,
    -0.75842166,
    -0.52238494,
    0.31357774,
    0.95279026,
    1.826216,
    0.6070537,
    0.19837016,
    0.48547745,
    0.13588494,
    -0.55480736,
    0.4409269,
    0.43304303,
    -0.25951988,
    -0.08661097,
    0.17231569,
    0.4552333,
    -0.16617185,
    1.7909219,
    0.26004297,
    0.8262564,
    -0.16886318,
    -0.28115508,
    -0.27259648,
    0.5402157,
    1.1101755,
    1.2672973,
    -0.120574586,
    -0.4647578,
    -0.20021003,
    2.1750557,
    -0.11638393,
    3.1323483,
    3.1952088,
    0.79419905,
    -3.3672233,
    -1.5567268,
    0.79575765,
    1.3394945,
    0.44755393,
    0.45483682,
    0.104258426,
    0.40857765,
    0.25033686,
    -0.040350292,
    0.12967952,
    0.036392838,
    -0.0140500385,
    0.24540639,
    -0.29477957,
    -0.29311004,
    -0.028238013,
    0.009057545,
    -0.2404115,
    -0.032729592,
    0.17410716,
    -0.08534197,
    0.0054334905,
    -0.006010456,
    0.23914726,
    0.026160104,
    1.2995211,
    -0.69217867,
    0.035898034,
    0.014947605,
    0.5878014,
    -0.20836298,
    -0.4526588,
    -0.94995344,
    -0.76863444,
    -0.9480782,
    0.41133237,
    -0.009298797,
    -0.012295644,
    -0.11509478,
    -0.030056152,
    -0.060758997,
    -0.037626747,
    -0.27359858,
    -0.026573325,
    0.27865067,
    -0.29210567,
    -0.18539983,
    -0.09693944,
    1.7699172,
    0.98553,
    1.4083189,
    -0.13176034,
    0.05311577,
    0.3041453,
    0.34087783,
    0.010976414,
    -0.21953669,
    0.8378663,
    2.4288933,
    1.2287501,
    3.4445605,
];
