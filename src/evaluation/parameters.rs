use crate::position::num_square_symmetries;

pub const NUM_VALUE_FEATURES_4S: usize = 51;
pub const NUM_POLICY_FEATURES_4S: usize = 99;

pub const NUM_VALUE_FEATURES_5S: usize = 69;
pub const NUM_POLICY_FEATURES_5S: usize = 118;

pub const NUM_VALUE_FEATURES_6S: usize = 72;
pub const NUM_POLICY_FEATURES_6S: usize = 128;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_stack_psqt: &'a mut [f32],
    pub their_stack_psqt: &'a mut [f32],
    pub side_to_move: &'a mut [f32],
    pub flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub capstone_over_own_piece: &'a mut [f32],
    pub capstone_on_stack: &'a mut [f32],
    pub standing_stone_on_stack: &'a mut [f32],
    pub flat_stone_next_to_our_stack: &'a mut [f32],
    pub standing_stone_next_to_our_stack: &'a mut [f32],
    pub capstone_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control: &'a mut [f32],
    pub block_their_line: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>());

        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (their_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (side_to_move, coefficients) = coefficients.split_at_mut(3);
        let (flatstone_lead, coefficients) = coefficients.split_at_mut(3);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (capstone_over_own_piece, coefficients) = coefficients.split_at_mut(1);
        let (capstone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (flat_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (capstone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control, coefficients) = coefficients.split_at_mut(S + 1);
        let (block_their_line, coefficients) = coefficients.split_at_mut(S + 1);

        assert!(coefficients.is_empty());

        ValueFeatures {
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_stack_psqt,
            their_stack_psqt,
            side_to_move,
            flatstone_lead,
            i_number_of_groups,
            critical_squares,
            capstone_over_own_piece,
            capstone_on_stack,
            standing_stone_on_stack,
            flat_stone_next_to_our_stack,
            standing_stone_next_to_our_stack,
            capstone_next_to_our_stack,
            num_lines_occupied,
            line_control,
            block_their_line,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub decline_win: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_our_critical_square: &'a mut [f32],
    pub place_their_critical_square: &'a mut [f32],
    pub ignore_their_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub stack_movement_that_gives_us_top_pieces: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (decline_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_our_critical_square, coefficients) = coefficients.split_at_mut(1);
        let (place_their_critical_square, coefficients) = coefficients.split_at_mut(4);
        let (ignore_their_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (stack_movement_that_gives_us_top_pieces, coefficients) = coefficients.split_at_mut(6);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(4);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            move_role_bonus,
            stack_movement_that_gives_us_top_pieces,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            move_onto_critical_square,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    0.40710354,
    0.54004306,
    0.7314182,
    1.0928891,
    1.0292282,
    1.3468512,
    0.0060105007,
    0.0055509824,
    -0.00028526317,
    1.3862512,
    1.7173628,
    1.6419909,
    0.9690684,
    1.0156716,
    1.0867381,
    1.3008595,
    1.4003952,
    1.7866403,
    0.48352754,
    0.10772651,
    1.0677989,
    -0.2995102,
    -0.2784462,
    0.4824724,
    0.3578643,
    0.30005231,
    0.112963594,
    0.03649128,
    -0.0068652583,
    -0.0045327637,
    -0.007574806,
    -0.001304483,
    0.7344016,
    -0.012913749,
    -0.27687806,
    -0.00081042293,
    0.8332573,
    -1.0331386,
    -0.5144214,
    -0.005624555,
    0.71696895,
    -0.81962454,
    -0.5723752,
    0.25761572,
    1.1193179,
    0.005045411,
    -0.03437448,
    0.008928416,
    0.048655495,
    -0.0016141674,
    0.003347816,
];
#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    -2.016969,
    0.81851447,
    0.765705,
    -1.6357331,
    -1.467111,
    -0.35877672,
    0.33391598,
    -0.12536721,
    0.048007667,
    -0.1497578,
    0.040983398,
    0.111225605,
    0.1724757,
    0.36305332,
    0.006971748,
    -0.24508667,
    -0.14229578,
    0.007571606,
    0.009635687,
    -0.0014058612,
    0.020791547,
    -0.2899725,
    0.5492654,
    0.97456664,
    -0.34653535,
    -0.34402964,
    -0.03477479,
    -0.017572079,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    0.24813661,
    -0.48579547,
    0.25956187,
    1.2430968,
    -0.7888577,
    -0.52466047,
    -0.30565074,
    0.8820405,
    -0.0057374667,
    0.00015021767,
    0.008557079,
    -0.0009557083,
    0.5404191,
    -0.109586276,
    -0.009191279,
    -0.89870566,
    -0.22790195,
    -0.00008111913,
    0.25357294,
    0.2787795,
    -0.008808966,
    0.4055635,
    0.23329715,
    -0.0049592447,
    1.0097361,
    0.59182465,
    0.002150652,
    -0.033461012,
    0.2877617,
    -0.004483435,
    0.7989894,
    0.90031624,
    0.008150065,
    -2.5468287,
    -0.06234921,
    0.0040705632,
    1.8905648,
    0.7510305,
    1.0799645,
    0.008161059,
    0.8159287,
    -5.924398,
    -1.9251184,
    0.40763998,
    1.2909952,
    0.35555425,
    0.23053028,
    0.2979899,
    0.11553655,
    -1.5506665,
    -2.0189047,
    -0.0077824043,
    0.25136295,
    0.9654446,
    -2.7512333,
    -3.2154632,
    -1.0548381,
    -1.2362809,
    0.63890743,
    -0.117805235,
    -0.002353027,
    0.008927224,
    0.009418681,
    -0.043625835,
    -0.018378662,
    1.6553202,
    0.7146677,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    -0.00044795033,
    0.15347332,
    0.14927012,
    0.25764394,
    0.2447137,
    0.27844432,
    0.7183903,
    0.79589164,
    0.69361377,
    0.93700093,
    0.77688575,
    1.0438795,
    -0.47725853,
    0.023881366,
    0.10956399,
    0.6041755,
    0.7021375,
    0.9956894,
    1.1578636,
    1.1255516,
    1.2779299,
    1.2831495,
    1.311057,
    1.2934446,
    0.7101744,
    0.73263896,
    0.77619076,
    0.8653954,
    0.8186914,
    0.8584326,
    0.98251414,
    0.7959507,
    1.0613332,
    0.61214393,
    0.04162296,
    0.47685462,
    -0.18535407,
    -0.175548,
    0.025191614,
    0.31633365,
    0.044689283,
    0.08818814,
    -0.04582565,
    0.036502212,
    0.11076386,
    0.12404986,
    0.60829574,
    0.35141426,
    -0.032268483,
    -0.15010805,
    -0.15450484,
    0.7011735,
    -0.77606714,
    -0.432654,
    -0.1280988,
    0.12062097,
    0.5066281,
    -1.0205822,
    -0.7606904,
    -0.18055946,
    0.6164267,
    1.3433626,
    0.0029393125,
    0.012231762,
    -0.07691176,
    0.14723985,
    0.103527844,
    0.08759902,
    -0.0380222,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    -1.8094499,
    1.1062391,
    0.39274937,
    -1.5689127,
    -1.3459579,
    -0.06740282,
    0.1909731,
    -0.25865212,
    0.094807796,
    -0.13718921,
    0.035816062,
    -0.045714892,
    0.049329035,
    0.2445019,
    0.4922803,
    0.14798552,
    0.044688057,
    0.17258273,
    -0.1910639,
    -0.34589314,
    -0.15605591,
    -0.22140513,
    0.009477671,
    -1.7250023,
    -1.3033009,
    -0.8712902,
    -0.11313733,
    0.78291535,
    3.5930119,
    -0.05218165,
    -0.27164248,
    0.17390022,
    0.72892845,
    1.2682757,
    -0.4238659,
    -0.43935153,
    -0.3502897,
    -0.26393142,
    -0.009234874,
    -0.06844915,
    -0.3957555,
    0.08425342,
    1.3712064,
    -0.24848635,
    0.37072304,
    -0.13253349,
    0.12737699,
    0.6624559,
    0.86063635,
    -0.37572086,
    -0.5634477,
    -0.64262336,
    -0.10498901,
    0.23804356,
    -0.010390052,
    -0.74364924,
    -0.28660282,
    0.84530795,
    0.9501119,
    0.5373182,
    0.022085067,
    0.28958762,
    -0.057064086,
    -0.41493735,
    -0.25417843,
    0.12463907,
    -0.030114848,
    -0.009738401,
    0.48217124,
    0.3110573,
    -0.42192903,
    1.3567137,
    0.062409777,
    0.7699412,
    -0.09855211,
    0.1340499,
    0.1666981,
    0.39522645,
    0.96612024,
    0.81724983,
    -0.28164947,
    -0.33188686,
    0.10683734,
    1.845565,
    0.4252535,
    2.9859436,
    2.13589,
    0.7427073,
    -4.050049,
    -1.8441315,
    0.6817789,
    1.1662238,
    0.23336743,
    0.2327487,
    0.13194028,
    0.34158137,
    -0.76007104,
    -1.201796,
    -0.7036484,
    0.15299563,
    0.3570982,
    -1.3410054,
    -1.7749074,
    -1.4903977,
    -1.7726455,
    0.59228307,
    0.03633516,
    -0.13883255,
    -0.04541116,
    0.04521044,
    0.14902158,
    1.0085868,
    -0.041221604,
    -0.37761185,
    -0.014821982,
    -0.0003887557,
    2.4880588,
    0.98710644,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.14389691,
    0.14861599,
    0.21016096,
    0.26289055,
    0.29426488,
    0.2697997,
    0.41935468,
    0.5154811,
    0.5189208,
    0.6312286,
    0.5163997,
    0.7095309,
    -0.40372136,
    -0.17229083,
    -0.08402492,
    0.22461775,
    0.32553476,
    0.5386108,
    0.45318204,
    0.63134146,
    0.763742,
    0.7841039,
    0.82111675,
    0.7907069,
    0.37137604,
    0.4108737,
    0.48396173,
    0.5127213,
    0.5265846,
    0.50946397,
    0.522094,
    0.46919465,
    0.63071007,
    0.5474945,
    0.29245657,
    0.48472342,
    -0.23528779,
    -0.04572703,
    -0.00088525214,
    0.15706137,
    0.14138941,
    0.08143665,
    -0.012585025,
    0.12482873,
    0.016435517,
    0.16839688,
    0.5649024,
    0.3192357,
    -0.025385296,
    -0.076988645,
    -0.115113735,
    0.43385288,
    -0.32607457,
    -0.24166256,
    -0.15374532,
    -0.06544677,
    0.090924904,
    0.2354019,
    -0.39573103,
    -0.33551803,
    -0.1949905,
    0.024735041,
    0.31291002,
    0.58010185,
    -0.0008957982,
    0.008336878,
    0.036577567,
    0.010293869,
    0.061720997,
    0.028714254,
    0.112023935,
    0.45978305,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    -2.1411629,
    1.0741417,
    -0.18375689,
    -1.5975451,
    -1.019815,
    -0.24910972,
    0.3191647,
    -0.5285142,
    0.09299203,
    -0.12560506,
    0.028191304,
    -0.45815036,
    -0.052010395,
    -0.271447,
    1.0532237,
    0.42798147,
    -0.103118055,
    -0.056434873,
    -0.23681833,
    -0.12738618,
    -0.1877621,
    -0.27835563,
    -0.10916976,
    -0.95323646,
    0.15288681,
    -1.3393561,
    0.11240805,
    0.35993332,
    1.5167797,
    -0.111218154,
    -0.3135443,
    -0.1270718,
    0.24302292,
    0.786394,
    0.6649765,
    -0.27526483,
    -0.4816269,
    -0.48791146,
    -0.34450516,
    -0.41399553,
    -0.0048051435,
    -0.31455633,
    -0.3656591,
    -0.30788,
    0.1657137,
    0.66854566,
    -0.061732817,
    0.45055035,
    -0.11486202,
    -0.09645327,
    0.14898534,
    0.56526536,
    0.22762808,
    -0.16760215,
    -0.35224634,
    -0.530927,
    -0.43257314,
    -0.27832744,
    -0.22334939,
    -0.5282869,
    -1.0218214,
    -1.0434095,
    -0.7488518,
    0.713915,
    2.3985372,
    0.4175534,
    0.1453883,
    0.075963505,
    0.008572843,
    -0.4892762,
    0.34631094,
    0.73427373,
    -0.07074132,
    -0.12805817,
    0.047308974,
    0.20558323,
    0.015977308,
    1.7630346,
    0.17075449,
    0.6062763,
    -0.04368221,
    -0.103451096,
    0.02975938,
    0.33694252,
    0.78029317,
    0.68931675,
    -0.10429163,
    -0.2719783,
    -0.20581196,
    2.2022874,
    0.2512611,
    3.89578,
    1.9176885,
    0.511033,
    -3.7295024,
    -1.8486279,
    1.1828533,
    1.422603,
    0.35463145,
    0.4972233,
    0.113877594,
    0.26959875,
    -0.40749788,
    -0.7907136,
    -0.71024376,
    0.1269672,
    0.3392259,
    -0.8448016,
    -1.0396348,
    -1.1775379,
    -1.3533815,
    0.49163327,
    0.003068108,
    0.02862275,
    -0.0888556,
    -0.02630243,
    0.065270856,
    0.030317234,
    -0.51206464,
    0.071335934,
    0.114774205,
    -0.02095629,
    0.060474556,
    0.051945884,
    0.009336323,
    0.020288792,
    1.3362237,
    0.92441666,
];
