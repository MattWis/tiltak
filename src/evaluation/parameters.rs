use crate::position::num_square_symmetries;

pub const NUM_VALUE_FEATURES_4S: usize = 51;
pub const NUM_POLICY_FEATURES_4S: usize = 97;

pub const NUM_VALUE_FEATURES_5S: usize = 69;
pub const NUM_POLICY_FEATURES_5S: usize = 116;

pub const NUM_VALUE_FEATURES_6S: usize = 72;
pub const NUM_POLICY_FEATURES_6S: usize = 126;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_stack_psqt: &'a mut [f32],
    pub their_stack_psqt: &'a mut [f32],
    pub side_to_move: &'a mut [f32],
    pub flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub capstone_over_own_piece: &'a mut [f32],
    pub capstone_on_stack: &'a mut [f32],
    pub standing_stone_on_stack: &'a mut [f32],
    pub flat_stone_next_to_our_stack: &'a mut [f32],
    pub standing_stone_next_to_our_stack: &'a mut [f32],
    pub capstone_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control: &'a mut [f32],
    pub block_their_line: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>());

        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (their_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (side_to_move, coefficients) = coefficients.split_at_mut(3);
        let (flatstone_lead, coefficients) = coefficients.split_at_mut(3);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (capstone_over_own_piece, coefficients) = coefficients.split_at_mut(1);
        let (capstone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (flat_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (capstone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control, coefficients) = coefficients.split_at_mut(S + 1);
        let (block_their_line, coefficients) = coefficients.split_at_mut(S + 1);

        assert!(coefficients.is_empty());

        ValueFeatures {
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_stack_psqt,
            their_stack_psqt,
            side_to_move,
            flatstone_lead,
            i_number_of_groups,
            critical_squares,
            capstone_over_own_piece,
            capstone_on_stack,
            standing_stone_on_stack,
            flat_stone_next_to_our_stack,
            standing_stone_next_to_our_stack,
            capstone_next_to_our_stack,
            num_lines_occupied,
            line_control,
            block_their_line,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub decline_win: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_our_critical_square: &'a mut [f32],
    pub place_their_critical_square: &'a mut [f32],
    pub ignore_their_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub stack_movement_that_gives_us_top_pieces: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (decline_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_our_critical_square, coefficients) = coefficients.split_at_mut(1);
        let (place_their_critical_square, coefficients) = coefficients.split_at_mut(4);
        let (ignore_their_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (stack_movement_that_gives_us_top_pieces, coefficients) = coefficients.split_at_mut(6);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(2);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            move_role_bonus,
            stack_movement_that_gives_us_top_pieces,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            move_onto_critical_square,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    0.40710354,
    0.54004306,
    0.7314182,
    1.0928891,
    1.0292282,
    1.3468512,
    0.0060105007,
    0.0055509824,
    -0.00028526317,
    1.3862512,
    1.7173628,
    1.6419909,
    0.9690684,
    1.0156716,
    1.0867381,
    1.3008595,
    1.4003952,
    1.7866403,
    0.48352754,
    0.10772651,
    1.0677989,
    -0.2995102,
    -0.2784462,
    0.4824724,
    0.3578643,
    0.30005231,
    0.112963594,
    0.03649128,
    -0.0068652583,
    -0.0045327637,
    -0.007574806,
    -0.001304483,
    0.7344016,
    -0.012913749,
    -0.27687806,
    -0.00081042293,
    0.8332573,
    -1.0331386,
    -0.5144214,
    -0.005624555,
    0.71696895,
    -0.81962454,
    -0.5723752,
    0.25761572,
    1.1193179,
    0.005045411,
    -0.03437448,
    0.008928416,
    0.048655495,
    -0.0016141674,
    0.003347816,
];
#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    -2.0042357,
    0.80536044,
    0.7595867,
    -1.5916117,
    -1.4669032,
    -0.3256405,
    0.3636458,
    -0.13643865,
    0.04802634,
    -0.1595407,
    0.042856675,
    0.11811086,
    0.17750032,
    0.36674953,
    0.010081696,
    -0.23812355,
    -0.13403212,
    0.007571606,
    0.009635687,
    -0.0014058612,
    0.018333644,
    -0.2765479,
    0.5559365,
    0.9881412,
    -0.34996906,
    -0.33867294,
    -0.022141505,
    0.0045443065,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    0.24523437,
    -0.4867913,
    0.26478466,
    1.2729846,
    -0.79046375,
    -0.5237694,
    -0.29500452,
    0.90878147,
    -0.0057374667,
    0.00015021767,
    0.008557079,
    -0.0009557083,
    0.4777245,
    -0.109421775,
    -0.009191279,
    -0.71573323,
    -0.21318588,
    -0.00008111913,
    0.28545618,
    0.27414966,
    -0.008808966,
    0.36478445,
    0.23300138,
    -0.0049592447,
    0.99990803,
    0.58436257,
    0.002150652,
    -0.027168702,
    0.28552708,
    -0.004483435,
    0.7558813,
    0.902724,
    0.008150065,
    -2.3904932,
    -0.056762718,
    0.0040705632,
    1.8600924,
    0.70841604,
    1.056969,
    0.008161059,
    0.8333029,
    -6.14276,
    -1.9444925,
    0.4100303,
    1.2951492,
    0.35815954,
    0.2363004,
    0.30356088,
    0.110291526,
    -1.4648052,
    -1.9208604,
    -0.0077824043,
    0.26184285,
    0.88213986,
    -2.6598573,
    -3.0924187,
    -0.9728298,
    -1.138275,
    0.64028466,
    -0.14907947,
    -0.002353027,
    0.008927224,
    0.009418681,
    2.4477978,
    0.6222275,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    -0.00044795033,
    0.15347332,
    0.14927012,
    0.25764394,
    0.2447137,
    0.27844432,
    0.7183903,
    0.79589164,
    0.69361377,
    0.93700093,
    0.77688575,
    1.0438795,
    -0.47725853,
    0.023881366,
    0.10956399,
    0.6041755,
    0.7021375,
    0.9956894,
    1.1578636,
    1.1255516,
    1.2779299,
    1.2831495,
    1.311057,
    1.2934446,
    0.7101744,
    0.73263896,
    0.77619076,
    0.8653954,
    0.8186914,
    0.8584326,
    0.98251414,
    0.7959507,
    1.0613332,
    0.61214393,
    0.04162296,
    0.47685462,
    -0.18535407,
    -0.175548,
    0.025191614,
    0.31633365,
    0.044689283,
    0.08818814,
    -0.04582565,
    0.036502212,
    0.11076386,
    0.12404986,
    0.60829574,
    0.35141426,
    -0.032268483,
    -0.15010805,
    -0.15450484,
    0.7011735,
    -0.77606714,
    -0.432654,
    -0.1280988,
    0.12062097,
    0.5066281,
    -1.0205822,
    -0.7606904,
    -0.18055946,
    0.6164267,
    1.3433626,
    0.0029393125,
    0.012231762,
    -0.07691176,
    0.14723985,
    0.103527844,
    0.08759902,
    -0.0380222,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    -1.8646021,
    1.0991802,
    0.38875082,
    -1.5827078,
    -1.357205,
    -0.07284391,
    0.19734651,
    -0.2637961,
    0.09634778,
    -0.13830695,
    0.03984544,
    -0.043050975,
    0.050007284,
    0.2454958,
    0.49214736,
    0.14770845,
    0.045610745,
    0.17395304,
    -0.19071934,
    -0.34405267,
    -0.15701881,
    -0.22195491,
    0.0084385695,
    -1.7309482,
    -1.304434,
    -0.8723404,
    -0.10582826,
    0.7897385,
    3.6020281,
    -0.052988634,
    -0.26804402,
    0.17687161,
    0.73092026,
    1.2702172,
    -0.42477158,
    -0.43829158,
    -0.34983635,
    -0.26439807,
    -0.0073684873,
    -0.073516935,
    -0.3891518,
    0.0918064,
    1.3890853,
    -0.24541801,
    0.3708219,
    -0.13177222,
    0.12967613,
    0.66410583,
    0.86552304,
    -0.37495467,
    -0.56336886,
    -0.6426613,
    -0.104713514,
    0.23896886,
    -0.011092929,
    -0.7425908,
    -0.28062618,
    0.853433,
    0.9656899,
    0.5283968,
    0.02663143,
    0.2719873,
    -0.033943653,
    -0.42249125,
    -0.24504575,
    0.12665679,
    -0.03433196,
    -0.006250174,
    0.481013,
    0.3158738,
    -0.40322006,
    1.3553454,
    0.061080765,
    0.76176935,
    -0.09927962,
    0.13617542,
    0.16440313,
    0.39703888,
    0.97003937,
    0.81630814,
    -0.28281316,
    -0.33471993,
    0.12871245,
    1.8376865,
    0.41869757,
    2.9870193,
    2.1290343,
    0.7640188,
    -4.06954,
    -1.8682324,
    0.6819695,
    1.168342,
    0.23481467,
    0.2342601,
    0.132217,
    0.3400458,
    -0.70534146,
    -1.1540316,
    -0.648069,
    0.16984423,
    0.28945574,
    -1.1849166,
    -1.6241758,
    -1.5052602,
    -1.7875541,
    0.5938112,
    0.036899332,
    -0.1448137,
    -0.0400383,
    0.046585955,
    0.12621452,
    0.51019555,
    -0.06477296,
    -0.16365331,
    3.1264489,
    0.91338676,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.14389691,
    0.14861599,
    0.21016096,
    0.26289055,
    0.29426488,
    0.2697997,
    0.41935468,
    0.5154811,
    0.5189208,
    0.6312286,
    0.5163997,
    0.7095309,
    -0.40372136,
    -0.17229083,
    -0.08402492,
    0.22461775,
    0.32553476,
    0.5386108,
    0.45318204,
    0.63134146,
    0.763742,
    0.7841039,
    0.82111675,
    0.7907069,
    0.37137604,
    0.4108737,
    0.48396173,
    0.5127213,
    0.5265846,
    0.50946397,
    0.522094,
    0.46919465,
    0.63071007,
    0.5474945,
    0.29245657,
    0.48472342,
    -0.23528779,
    -0.04572703,
    -0.00088525214,
    0.15706137,
    0.14138941,
    0.08143665,
    -0.012585025,
    0.12482873,
    0.016435517,
    0.16839688,
    0.5649024,
    0.3192357,
    -0.025385296,
    -0.076988645,
    -0.115113735,
    0.43385288,
    -0.32607457,
    -0.24166256,
    -0.15374532,
    -0.06544677,
    0.090924904,
    0.2354019,
    -0.39573103,
    -0.33551803,
    -0.1949905,
    0.024735041,
    0.31291002,
    0.58010185,
    -0.0008957982,
    0.008336878,
    0.036577567,
    0.010293869,
    0.061720997,
    0.028714254,
    0.112023935,
    0.45978305,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    -2.2707381,
    1.072353,
    -0.16682279,
    -1.5106854,
    -0.96848124,
    -0.23383749,
    0.31741217,
    -0.5264084,
    0.092856795,
    -0.12045184,
    0.03008858,
    -0.45778465,
    -0.05256521,
    -0.27096814,
    1.0512277,
    0.42713168,
    -0.10333667,
    -0.050866045,
    -0.23093455,
    -0.11986199,
    -0.17339417,
    -0.26622373,
    -0.098851755,
    -0.8451369,
    0.15350951,
    -1.280575,
    0.06679607,
    0.28917357,
    1.4345081,
    -0.10995128,
    -0.31072867,
    -0.124811076,
    0.244889,
    0.7877361,
    0.6498726,
    -0.26655945,
    -0.46741387,
    -0.46925798,
    -0.32073653,
    -0.36797777,
    -0.0045747864,
    -0.29729608,
    -0.35899135,
    -0.3024237,
    0.15663871,
    0.56451476,
    -0.040290613,
    0.44993788,
    -0.115220904,
    -0.09674677,
    0.14831652,
    0.5643068,
    0.22496672,
    -0.16706526,
    -0.34152776,
    -0.51407814,
    -0.40998432,
    -0.24928516,
    -0.19149525,
    -0.49623105,
    -1.0027559,
    -1.0268706,
    -0.73856336,
    0.67086655,
    2.3013623,
    0.41541952,
    0.11403779,
    0.06957145,
    0.013947279,
    -0.44707555,
    0.30797386,
    0.7335428,
    -0.056728568,
    -0.1142196,
    0.047931787,
    0.19595292,
    0.023114646,
    1.7639937,
    0.14851448,
    0.5591779,
    -0.04475054,
    -0.09209231,
    0.06942671,
    0.33862972,
    0.76860505,
    0.6818063,
    -0.105460875,
    -0.27111924,
    -0.13003118,
    2.1966345,
    0.25413775,
    3.8330183,
    1.9043422,
    0.5309666,
    -3.654015,
    -1.7736326,
    1.1831436,
    1.4226886,
    0.35449034,
    0.49762046,
    0.11365849,
    0.27113652,
    -0.38494012,
    -0.7721536,
    -0.67879534,
    0.15727511,
    0.28984097,
    -0.83581793,
    -1.0459744,
    -1.1442624,
    -1.3201866,
    0.49517122,
    -0.00109285,
    0.026207808,
    -0.0945283,
    -0.031234415,
    0.059435267,
    0.02554767,
    -0.500239,
    0.042047486,
    0.13164425,
    -0.048762858,
    0.01379504,
    0.040561553,
    2.8314643,
    0.8909078,
];
