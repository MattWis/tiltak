use crate::position::num_square_symmetries;

pub const NUM_VALUE_FEATURES_4S: usize = 51;
pub const NUM_POLICY_FEATURES_4S: usize = 108;

pub const NUM_VALUE_FEATURES_5S: usize = 69;
pub const NUM_POLICY_FEATURES_5S: usize = 127;

pub const NUM_VALUE_FEATURES_6S: usize = 72;
pub const NUM_POLICY_FEATURES_6S: usize = 137;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_stack_psqt: &'a mut [f32],
    pub their_stack_psqt: &'a mut [f32],
    pub side_to_move: &'a mut [f32],
    pub flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub capstone_over_own_piece: &'a mut [f32],
    pub capstone_on_stack: &'a mut [f32],
    pub standing_stone_on_stack: &'a mut [f32],
    pub flat_stone_next_to_our_stack: &'a mut [f32],
    pub standing_stone_next_to_our_stack: &'a mut [f32],
    pub capstone_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control: &'a mut [f32],
    pub block_their_line: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>());

        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (their_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (side_to_move, coefficients) = coefficients.split_at_mut(3);
        let (flatstone_lead, coefficients) = coefficients.split_at_mut(3);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (capstone_over_own_piece, coefficients) = coefficients.split_at_mut(1);
        let (capstone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (flat_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (capstone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control, coefficients) = coefficients.split_at_mut(S + 1);
        let (block_their_line, coefficients) = coefficients.split_at_mut(S + 1);

        assert!(coefficients.is_empty());

        ValueFeatures {
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_stack_psqt,
            their_stack_psqt,
            side_to_move,
            flatstone_lead,
            i_number_of_groups,
            critical_squares,
            capstone_over_own_piece,
            capstone_on_stack,
            standing_stone_on_stack,
            flat_stone_next_to_our_stack,
            standing_stone_next_to_our_stack,
            capstone_next_to_our_stack,
            num_lines_occupied,
            line_control,
            block_their_line,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub decline_win: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_our_critical_square: &'a mut [f32],
    pub place_their_critical_square: &'a mut [f32],
    pub ignore_their_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub stack_movement_that_gives_us_top_pieces: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub recapture_stack_pure: &'a mut [f32],
    pub recapture_stack_impure: &'a mut [f32],
    pub continue_spread: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
    pub spread_that_connects_groups_to_win: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (decline_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_our_critical_square, coefficients) = coefficients.split_at_mut(1);
        let (place_their_critical_square, coefficients) = coefficients.split_at_mut(4);
        let (ignore_their_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (stack_movement_that_gives_us_top_pieces, coefficients) = coefficients.split_at_mut(6);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (recapture_stack_pure, coefficients) = coefficients.split_at_mut(3);
        let (recapture_stack_impure, coefficients) = coefficients.split_at_mut(3);
        let (continue_spread, coefficients) = coefficients.split_at_mut(3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(3);
        let (spread_that_connects_groups_to_win, coefficients) = coefficients.split_at_mut(1);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            move_role_bonus,
            stack_movement_that_gives_us_top_pieces,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    0.40710354,
    0.54004306,
    0.7314182,
    1.0928891,
    1.0292282,
    1.3468512,
    0.0060105007,
    0.0055509824,
    -0.00028526317,
    1.3862512,
    1.7173628,
    1.6419909,
    0.9690684,
    1.0156716,
    1.0867381,
    1.3008595,
    1.4003952,
    1.7866403,
    0.48352754,
    0.10772651,
    1.0677989,
    -0.2995102,
    -0.2784462,
    0.4824724,
    0.3578643,
    0.30005231,
    0.112963594,
    0.03649128,
    -0.0068652583,
    -0.0045327637,
    -0.007574806,
    -0.001304483,
    0.7344016,
    -0.012913749,
    -0.27687806,
    -0.00081042293,
    0.8332573,
    -1.0331386,
    -0.5144214,
    -0.005624555,
    0.71696895,
    -0.81962454,
    -0.5723752,
    0.25761572,
    1.1193179,
    0.005045411,
    -0.03437448,
    0.008928416,
    0.048655495,
    -0.0016141674,
    0.003347816,
];
#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    -2.0719647,
    0.80075043,
    0.7676074,
    -1.5972916,
    -1.4742651,
    -0.29498705,
    0.37684432,
    -0.13077444,
    0.048286293,
    -0.15925775,
    0.043898482,
    0.11908263,
    0.17815357,
    0.36819503,
    0.010134833,
    -0.23735447,
    -0.13298218,
    0.007571606,
    0.009635687,
    -0.0014058612,
    0.01764629,
    -0.2758876,
    0.5591214,
    0.9911211,
    -0.35155052,
    -0.3377054,
    -0.01782859,
    0.004591408,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    0.24485461,
    -0.48789623,
    0.26526845,
    1.2801256,
    -0.789896,
    -0.52273184,
    -0.29518664,
    0.9111032,
    -0.0057374667,
    0.00015021767,
    0.008557079,
    -0.0009557083,
    0.47237676,
    -0.10874125,
    -0.009191279,
    -0.6876252,
    -0.21009414,
    -0.00008111913,
    0.28729266,
    0.2717156,
    -0.008808966,
    0.36274856,
    0.23261975,
    -0.0049592447,
    0.9988413,
    0.5808035,
    0.002150652,
    -0.025472593,
    0.28373408,
    -0.004483435,
    0.75872165,
    0.90284395,
    0.008150065,
    -2.40272,
    -0.055840395,
    0.0040705632,
    1.8539387,
    0.7062389,
    1.0555737,
    0.008161059,
    0.83771354,
    -6.1509137,
    -1.8313867,
    0.40847772,
    1.2969847,
    0.35707915,
    0.23779309,
    0.30598265,
    0.11231491,
    -1.4617573,
    -1.9104908,
    -0.0077824043,
    0.280901,
    0.86108357,
    -2.6583102,
    -3.0903924,
    -0.9800238,
    -1.145781,
    0.6408068,
    -0.1489111,
    -0.002353027,
    0.008927224,
    0.009418681,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    1.0977011,
    1.5067945,
    0.6087727,
    1.3584409,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    -0.00044795033,
    0.15347332,
    0.14927012,
    0.25764394,
    0.2447137,
    0.27844432,
    0.7183903,
    0.79589164,
    0.69361377,
    0.93700093,
    0.77688575,
    1.0438795,
    -0.47725853,
    0.023881366,
    0.10956399,
    0.6041755,
    0.7021375,
    0.9956894,
    1.1578636,
    1.1255516,
    1.2779299,
    1.2831495,
    1.311057,
    1.2934446,
    0.7101744,
    0.73263896,
    0.77619076,
    0.8653954,
    0.8186914,
    0.8584326,
    0.98251414,
    0.7959507,
    1.0613332,
    0.61214393,
    0.04162296,
    0.47685462,
    -0.18535407,
    -0.175548,
    0.025191614,
    0.31633365,
    0.044689283,
    0.08818814,
    -0.04582565,
    0.036502212,
    0.11076386,
    0.12404986,
    0.60829574,
    0.35141426,
    -0.032268483,
    -0.15010805,
    -0.15450484,
    0.7011735,
    -0.77606714,
    -0.432654,
    -0.1280988,
    0.12062097,
    0.5066281,
    -1.0205822,
    -0.7606904,
    -0.18055946,
    0.6164267,
    1.3433626,
    0.0029393125,
    0.012231762,
    -0.07691176,
    0.14723985,
    0.103527844,
    0.08759902,
    -0.0380222,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    -2.044515,
    1.0964148,
    0.39673412,
    -1.5894681,
    -1.3635232,
    -0.072942734,
    0.20515443,
    -0.26094228,
    0.0973487,
    -0.1378879,
    0.04071495,
    -0.042679135,
    0.050720654,
    0.24567513,
    0.49265927,
    0.14831087,
    0.045606453,
    0.17220747,
    -0.19043049,
    -0.3441734,
    -0.15406312,
    -0.22170828,
    0.0078742495,
    -1.738464,
    -1.305101,
    -0.8721066,
    -0.102085866,
    0.79297453,
    3.6063607,
    -0.05308401,
    -0.26729086,
    0.17856728,
    0.7328353,
    1.2706977,
    -0.42554915,
    -0.43845052,
    -0.34827524,
    -0.26318365,
    -0.007085498,
    -0.0753247,
    -0.3901424,
    0.09480486,
    1.3948419,
    -0.24464363,
    0.37046266,
    -0.13188091,
    0.12952702,
    0.66504914,
    0.86994475,
    -0.37428144,
    -0.5628275,
    -0.64314437,
    -0.104407445,
    0.24005231,
    -0.011674737,
    -0.74303895,
    -0.280482,
    0.8576728,
    0.9690662,
    0.52334356,
    0.029535789,
    0.27052236,
    -0.020738982,
    -0.424594,
    -0.24021101,
    0.12935261,
    -0.037417598,
    -0.006404205,
    0.4791226,
    0.3191739,
    -0.39834455,
    1.3534948,
    0.059562884,
    0.7593955,
    -0.09840882,
    0.13587213,
    0.16167441,
    0.3983103,
    0.9696006,
    0.81745255,
    -0.28514415,
    -0.33622846,
    0.12552601,
    1.8350046,
    0.4178798,
    2.9893417,
    2.1318977,
    0.767718,
    -4.0725837,
    -1.8373699,
    0.68101496,
    1.1698692,
    0.23387766,
    0.235911,
    0.13234693,
    0.33987287,
    -0.6956238,
    -1.1416849,
    -0.63644964,
    0.17200287,
    0.2790498,
    -1.166331,
    -1.6108218,
    -1.4923215,
    -1.7746633,
    0.5949323,
    0.03496428,
    -0.1457791,
    -0.041182138,
    0.034678567,
    0.12026587,
    0.48239857,
    -0.06852308,
    -0.14015368,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.865731,
    2.155251,
    0.894927,
    2.2789805,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.046171084,
    0.18331811,
    0.22388674,
    0.40089765,
    0.39143583,
    0.38337028,
    0.18175879,
    0.9748611,
    0.8954859,
    1.0704179,
    1.1226778,
    1.2997634,
    -0.12113264,
    0.23441482,
    0.47019416,
    0.74714774,
    0.8460779,
    1.1941108,
    1.1458044,
    1.4042677,
    1.4908792,
    1.3719292,
    1.5380452,
    1.4982508,
    0.6325053,
    0.91657126,
    0.88002807,
    0.9217417,
    0.91336334,
    0.91496414,
    1.0705668,
    0.90843934,
    1.0134091,
    0.85562843,
    0.34161913,
    0.43768582,
    -0.30401027,
    -0.19501288,
    0.013981101,
    0.28825554,
    0.31932393,
    0.16409515,
    -0.06394048,
    0.07299698,
    0.18443385,
    0.8699935,
    0.6562437,
    0.49707237,
    -0.042350415,
    -0.1975843,
    -0.20159936,
    0.8737253,
    -0.76951206,
    -0.48211715,
    -0.27948415,
    -0.034151398,
    0.19642136,
    0.49798742,
    -1.2477565,
    -0.97310567,
    -0.4381552,
    0.22319506,
    0.91539365,
    1.520835,
    0.0074355192,
    0.046738762,
    0.08225036,
    -0.0037264838,
    0.101646885,
    0.06553965,
    0.19098015,
    0.18686743,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    -2.3722568,
    1.3753085,
    -0.05599928,
    -1.6589375,
    -1.346043,
    -0.17465232,
    0.37565148,
    -0.3066254,
    0.08811491,
    -0.014189924,
    0.060086817,
    -0.32014057,
    -0.10772991,
    -0.083003074,
    0.5345806,
    0.4478216,
    0.23606764,
    -0.13285701,
    -0.20086738,
    -0.29760996,
    -0.11034597,
    -0.20459111,
    0.107480414,
    -0.40491802,
    -0.7728299,
    -0.39564857,
    -0.6158019,
    0.27583322,
    2.3844123,
    0.006443165,
    -0.33169395,
    -0.12910426,
    0.24291259,
    0.6975901,
    0.8786464,
    -0.35648528,
    -0.377092,
    -0.33198568,
    -0.29050735,
    -0.33318856,
    -0.004581972,
    -0.14523402,
    -0.1199744,
    0.46696606,
    0.8594324,
    0.13495012,
    -0.16844603,
    0.36400846,
    -0.094546355,
    -0.027350603,
    0.2970953,
    0.5852248,
    0.2789175,
    -0.1225156,
    -0.44829637,
    -0.61050797,
    -0.42241493,
    -0.16112478,
    0.09410538,
    -0.92357796,
    -0.778205,
    -0.5209466,
    0.3704196,
    1.0281354,
    1.8375264,
    0.61105543,
    0.20201908,
    0.49148482,
    0.13092731,
    -0.48673913,
    0.44096208,
    0.4320801,
    -0.2679888,
    -0.073677555,
    0.17241572,
    0.46357143,
    -0.126906,
    1.8002613,
    0.18250614,
    0.843889,
    -0.171101,
    -0.13823344,
    -0.19900341,
    0.5578015,
    0.9472266,
    1.31026,
    -0.11692141,
    -0.17605196,
    -0.17236769,
    2.1920562,
    -0.08015087,
    3.558574,
    3.1354558,
    0.7862099,
    -3.3184578,
    -1.5455824,
    0.8013521,
    1.3130912,
    0.44987816,
    0.43896416,
    0.109497115,
    0.41295692,
    -0.66921073,
    -0.23574291,
    -0.10684912,
    0.83503896,
    -0.38253704,
    -0.7551307,
    -1.1509627,
    -1.0786269,
    -1.2655274,
    0.51834434,
    0.02969124,
    0.03094472,
    -0.1002859,
    -0.015036639,
    -0.043069147,
    -0.005776774,
    -0.27496058,
    -0.018505482,
    0.25868466,
    -0.30082047,
    -0.20660733,
    -0.07105595,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    1.0446956,
    2.1992846,
    0.9547137,
    3.125463,
];
