use crate::position::num_square_symmetries;

pub const NUM_VALUE_FEATURES_4S: usize = 51;
pub const NUM_POLICY_FEATURES_4S: usize = 98;

pub const NUM_VALUE_FEATURES_5S: usize = 69;
pub const NUM_POLICY_FEATURES_5S: usize = 117;

pub const NUM_VALUE_FEATURES_6S: usize = 72;
pub const NUM_POLICY_FEATURES_6S: usize = 127;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_stack_psqt: &'a mut [f32],
    pub their_stack_psqt: &'a mut [f32],
    pub side_to_move: &'a mut [f32],
    pub flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub capstone_over_own_piece: &'a mut [f32],
    pub capstone_on_stack: &'a mut [f32],
    pub standing_stone_on_stack: &'a mut [f32],
    pub flat_stone_next_to_our_stack: &'a mut [f32],
    pub standing_stone_next_to_our_stack: &'a mut [f32],
    pub capstone_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control: &'a mut [f32],
    pub block_their_line: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>());

        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (their_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (side_to_move, coefficients) = coefficients.split_at_mut(3);
        let (flatstone_lead, coefficients) = coefficients.split_at_mut(3);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (capstone_over_own_piece, coefficients) = coefficients.split_at_mut(1);
        let (capstone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (flat_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (capstone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control, coefficients) = coefficients.split_at_mut(S + 1);
        let (block_their_line, coefficients) = coefficients.split_at_mut(S + 1);

        assert!(coefficients.is_empty());

        ValueFeatures {
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_stack_psqt,
            their_stack_psqt,
            side_to_move,
            flatstone_lead,
            i_number_of_groups,
            critical_squares,
            capstone_over_own_piece,
            capstone_on_stack,
            standing_stone_on_stack,
            flat_stone_next_to_our_stack,
            standing_stone_next_to_our_stack,
            capstone_next_to_our_stack,
            num_lines_occupied,
            line_control,
            block_their_line,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_critical_square: &'a mut [f32],
    pub ignore_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub stack_movement_that_gives_us_top_pieces: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_critical_square, coefficients) = coefficients.split_at_mut(5);
        let (ignore_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (stack_movement_that_gives_us_top_pieces, coefficients) = coefficients.split_at_mut(6);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(4);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_critical_square,
            ignore_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            move_role_bonus,
            stack_movement_that_gives_us_top_pieces,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            move_onto_critical_square,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    0.40710354,
    0.54004306,
    0.7314182,
    1.0928891,
    1.0292282,
    1.3468512,
    0.0060105007,
    0.0055509824,
    -0.00028526317,
    1.3862512,
    1.7173628,
    1.6419909,
    0.9690684,
    1.0156716,
    1.0867381,
    1.3008595,
    1.4003952,
    1.7866403,
    0.48352754,
    0.10772651,
    1.0677989,
    -0.2995102,
    -0.2784462,
    0.4824724,
    0.3578643,
    0.30005231,
    0.112963594,
    0.03649128,
    -0.0068652583,
    -0.0045327637,
    -0.007574806,
    -0.001304483,
    0.7344016,
    -0.012913749,
    -0.27687806,
    -0.00081042293,
    0.8332573,
    -1.0331386,
    -0.5144214,
    -0.005624555,
    0.71696895,
    -0.81962454,
    -0.5723752,
    0.25761572,
    1.1193179,
    0.005045411,
    -0.03437448,
    0.008928416,
    0.048655495,
    -0.0016141674,
    0.003347816,
];
#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    0.84942,
    0.7278703,
    -1.5348676,
    -1.4079006,
    -0.32312596,
    0.3441702,
    -0.1076647,
    0.04414984,
    -0.13175353,
    0.034637567,
    0.10555086,
    0.16469614,
    0.35096744,
    -0.0006887378,
    -0.2476397,
    -0.13298933,
    -0.00496279,
    0.007571606,
    0.009635687,
    0.020054277,
    -0.2975318,
    0.5360156,
    0.966801,
    -0.3319433,
    -0.34366065,
    -0.04621336,
    -0.057440598,
    0.0076200105,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.25168267,
    -0.47880486,
    0.25596938,
    1.2162944,
    -0.8050737,
    -0.5300595,
    -0.30916074,
    0.87909794,
    -0.0011021066,
    -0.0057374667,
    0.00015021767,
    0.008557079,
    0.6654597,
    -0.11035677,
    -0.008447227,
    -1.2594937,
    -0.2535224,
    -0.008878133,
    0.1662873,
    0.2834901,
    -0.007706399,
    0.49053237,
    0.19197915,
    0.004325905,
    1.018294,
    0.58431715,
    -0.0022270367,
    -0.0522908,
    0.27991554,
    0.0012913607,
    0.7580579,
    0.88566905,
    -0.0016911505,
    -2.3908284,
    -0.06149811,
    0.006870074,
    1.9387933,
    0.7390329,
    1.0635293,
    0.0042462563,
    0.82549417,
    -6.119095,
    -1.6292505,
    0.40981707,
    1.2949078,
    0.35593456,
    0.23572357,
    0.29335332,
    0.11324438,
    -1.5093899,
    -1.9703557,
    0.004355209,
    0.24091062,
    0.93470365,
    -2.7508092,
    -3.187948,
    -0.9778942,
    -1.14024,
    0.6230326,
    -0.12673792,
    -0.002478423,
    -0.002353027,
    0.008927224,
    -0.11266278,
    -0.04454572,
    1.7431606,
    0.669609,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    -0.00044795033,
    0.15347332,
    0.14927012,
    0.25764394,
    0.2447137,
    0.27844432,
    0.7183903,
    0.79589164,
    0.69361377,
    0.93700093,
    0.77688575,
    1.0438795,
    -0.47725853,
    0.023881366,
    0.10956399,
    0.6041755,
    0.7021375,
    0.9956894,
    1.1578636,
    1.1255516,
    1.2779299,
    1.2831495,
    1.311057,
    1.2934446,
    0.7101744,
    0.73263896,
    0.77619076,
    0.8653954,
    0.8186914,
    0.8584326,
    0.98251414,
    0.7959507,
    1.0613332,
    0.61214393,
    0.04162296,
    0.47685462,
    -0.18535407,
    -0.175548,
    0.025191614,
    0.31633365,
    0.044689283,
    0.08818814,
    -0.04582565,
    0.036502212,
    0.11076386,
    0.12404986,
    0.60829574,
    0.35141426,
    -0.032268483,
    -0.15010805,
    -0.15450484,
    0.7011735,
    -0.77606714,
    -0.432654,
    -0.1280988,
    0.12062097,
    0.5066281,
    -1.0205822,
    -0.7606904,
    -0.18055946,
    0.6164267,
    1.3433626,
    0.0029393125,
    0.012231762,
    -0.07691176,
    0.14723985,
    0.103527844,
    0.08759902,
    -0.0380222,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    1.1129421,
    0.35160527,
    -1.5474218,
    -1.3310968,
    -0.061109614,
    0.19464985,
    -0.26085293,
    0.09120556,
    -0.13727874,
    0.032406643,
    -0.045623668,
    0.04847117,
    0.24398074,
    0.49101582,
    0.14666374,
    0.043645564,
    0.17021362,
    -0.19088438,
    -0.34352413,
    -0.15089935,
    -0.21726783,
    0.010892819,
    -1.7012789,
    -1.305156,
    -0.87132514,
    -0.12252679,
    0.77073735,
    3.578523,
    -0.05192253,
    -0.27369547,
    0.17119882,
    0.7265195,
    1.2693555,
    -0.4193618,
    -0.43704018,
    -0.35164434,
    -0.2628549,
    -0.024678817,
    -0.063906156,
    -0.40031496,
    0.07346695,
    1.3429989,
    -0.24671495,
    0.3692333,
    -0.1334816,
    0.12644564,
    0.66170204,
    0.84906524,
    -0.38136414,
    -0.5626051,
    -0.64097565,
    -0.1036049,
    0.23095529,
    -0.007944759,
    -0.7425102,
    -0.295012,
    0.84079176,
    0.92653483,
    0.56082183,
    0.015560065,
    0.2972463,
    -0.10907729,
    -0.43392095,
    -0.26597157,
    0.11135874,
    -0.017135423,
    -0.005498142,
    0.48819083,
    0.29109833,
    -0.4306829,
    1.3626409,
    0.06973941,
    0.778912,
    -0.103099175,
    0.1250262,
    0.16963057,
    0.39130458,
    0.9486038,
    0.81357765,
    -0.27741277,
    -0.32503787,
    0.104563944,
    1.8561928,
    0.42745626,
    2.980888,
    2.1288168,
    0.7460284,
    -4.064657,
    -1.7923948,
    0.68151844,
    1.1678349,
    0.2344783,
    0.23467025,
    0.13255021,
    0.34537655,
    -0.76359934,
    -1.2319605,
    -0.6953377,
    0.18669201,
    0.33014515,
    -1.4257045,
    -1.8250035,
    -1.4728031,
    -1.7956418,
    0.5854213,
    0.035584785,
    -0.14444908,
    -0.0494485,
    0.040065333,
    0.13885762,
    0.97526574,
    -0.06289075,
    -0.35897765,
    -0.002685463,
    -0.017613143,
    2.5642862,
    0.9726436,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.14389691,
    0.14861599,
    0.21016096,
    0.26289055,
    0.29426488,
    0.2697997,
    0.41935468,
    0.5154811,
    0.5189208,
    0.6312286,
    0.5163997,
    0.7095309,
    -0.40372136,
    -0.17229083,
    -0.08402492,
    0.22461775,
    0.32553476,
    0.5386108,
    0.45318204,
    0.63134146,
    0.763742,
    0.7841039,
    0.82111675,
    0.7907069,
    0.37137604,
    0.4108737,
    0.48396173,
    0.5127213,
    0.5265846,
    0.50946397,
    0.522094,
    0.46919465,
    0.63071007,
    0.5474945,
    0.29245657,
    0.48472342,
    -0.23528779,
    -0.04572703,
    -0.00088525214,
    0.15706137,
    0.14138941,
    0.08143665,
    -0.012585025,
    0.12482873,
    0.016435517,
    0.16839688,
    0.5649024,
    0.3192357,
    -0.025385296,
    -0.076988645,
    -0.115113735,
    0.43385288,
    -0.32607457,
    -0.24166256,
    -0.15374532,
    -0.06544677,
    0.090924904,
    0.2354019,
    -0.39573103,
    -0.33551803,
    -0.1949905,
    0.024735041,
    0.31291002,
    0.58010185,
    -0.0008957982,
    0.008336878,
    0.036577567,
    0.010293869,
    0.061720997,
    0.028714254,
    0.112023935,
    0.45978305,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    1.0761415,
    -0.20392366,
    -1.5957917,
    -1.0170178,
    -0.24622929,
    0.31590503,
    -0.53023076,
    0.08945568,
    -0.12135358,
    0.027990256,
    -0.45834377,
    -0.05221778,
    -0.2708811,
    1.0522588,
    0.42760357,
    -0.102841415,
    -0.055824466,
    -0.23636137,
    -0.12664953,
    -0.1867677,
    -0.27771804,
    -0.10778144,
    -0.9475715,
    0.15393826,
    -1.3346665,
    0.10117317,
    0.36131993,
    1.5165875,
    -0.111292064,
    -0.31479222,
    -0.1282098,
    0.24160187,
    0.7851081,
    0.6698695,
    -0.2760461,
    -0.48211786,
    -0.4905163,
    -0.34806952,
    -0.4166082,
    0.0006475467,
    -0.3149442,
    -0.36603606,
    -0.31074345,
    0.16677977,
    0.66421854,
    -0.05891385,
    0.45059532,
    -0.114227645,
    -0.095958926,
    0.1495243,
    0.56463003,
    0.22709666,
    -0.16723852,
    -0.3526041,
    -0.53298867,
    -0.4331437,
    -0.2805091,
    -0.22637208,
    -0.5278569,
    -1.0196106,
    -1.0433916,
    -0.7480558,
    0.7136246,
    2.393531,
    0.4242352,
    0.15327413,
    0.067889966,
    -0.0015238798,
    -0.4977011,
    0.34856763,
    0.729513,
    -0.07795987,
    -0.12225163,
    0.04856156,
    0.20982236,
    0.0113279335,
    1.764215,
    0.1698012,
    0.6008372,
    -0.0445916,
    -0.102708936,
    0.033664823,
    0.33481282,
    0.7800392,
    0.68724453,
    -0.10258292,
    -0.27060854,
    -0.20431772,
    2.203619,
    0.25201264,
    3.897377,
    1.9169246,
    0.5246975,
    -3.7276506,
    -1.8423921,
    1.1832021,
    1.4220612,
    0.35449645,
    0.49830303,
    0.11406069,
    0.2698562,
    -0.4047099,
    -0.75652695,
    -0.69591933,
    0.14570877,
    0.32458535,
    -0.8257423,
    -1.0064554,
    -1.1638561,
    -1.3467181,
    0.48255405,
    0.0010909056,
    0.027377574,
    -0.11290105,
    -0.02805233,
    0.06732851,
    0.022598015,
    -0.52618885,
    0.063808054,
    0.12374191,
    -0.08991181,
    0.06054584,
    0.05048791,
    -0.0036284088,
    0.028199872,
    1.4769388,
    0.9387733,
];
