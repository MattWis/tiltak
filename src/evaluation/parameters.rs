use crate::position::num_square_symmetries;

pub const NUM_VALUE_FEATURES_4S: usize = 51;
pub const NUM_POLICY_FEATURES_4S: usize = 99;

pub const NUM_VALUE_FEATURES_5S: usize = 69;
pub const NUM_POLICY_FEATURES_5S: usize = 118;

pub const NUM_VALUE_FEATURES_6S: usize = 72;
pub const NUM_POLICY_FEATURES_6S: usize = 128;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_stack_psqt: &'a mut [f32],
    pub their_stack_psqt: &'a mut [f32],
    pub side_to_move: &'a mut [f32],
    pub flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub capstone_over_own_piece: &'a mut [f32],
    pub capstone_on_stack: &'a mut [f32],
    pub standing_stone_on_stack: &'a mut [f32],
    pub flat_stone_next_to_our_stack: &'a mut [f32],
    pub standing_stone_next_to_our_stack: &'a mut [f32],
    pub capstone_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control: &'a mut [f32],
    pub block_their_line: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>());

        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (their_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (side_to_move, coefficients) = coefficients.split_at_mut(3);
        let (flatstone_lead, coefficients) = coefficients.split_at_mut(3);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (capstone_over_own_piece, coefficients) = coefficients.split_at_mut(1);
        let (capstone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (flat_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (capstone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control, coefficients) = coefficients.split_at_mut(S + 1);
        let (block_their_line, coefficients) = coefficients.split_at_mut(S + 1);

        assert!(coefficients.is_empty());

        ValueFeatures {
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_stack_psqt,
            their_stack_psqt,
            side_to_move,
            flatstone_lead,
            i_number_of_groups,
            critical_squares,
            capstone_over_own_piece,
            capstone_on_stack,
            standing_stone_on_stack,
            flat_stone_next_to_our_stack,
            standing_stone_next_to_our_stack,
            capstone_next_to_our_stack,
            num_lines_occupied,
            line_control,
            block_their_line,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub move_count: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_critical_square: &'a mut [f32],
    pub ignore_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub stack_movement_that_gives_us_top_pieces: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (move_count, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_critical_square, coefficients) = coefficients.split_at_mut(5);
        let (ignore_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (stack_movement_that_gives_us_top_pieces, coefficients) = coefficients.split_at_mut(6);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(4);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            move_count,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_critical_square,
            ignore_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            move_role_bonus,
            stack_movement_that_gives_us_top_pieces,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            move_onto_critical_square,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    0.40710354,
    0.54004306,
    0.7314182,
    1.0928891,
    1.0292282,
    1.3468512,
    0.0060105007,
    0.0055509824,
    -0.00028526317,
    1.3862512,
    1.7173628,
    1.6419909,
    0.9690684,
    1.0156716,
    1.0867381,
    1.3008595,
    1.4003952,
    1.7866403,
    0.48352754,
    0.10772651,
    1.0677989,
    -0.2995102,
    -0.2784462,
    0.4824724,
    0.3578643,
    0.30005231,
    0.112963594,
    0.03649128,
    -0.0068652583,
    -0.0045327637,
    -0.007574806,
    -0.001304483,
    0.7344016,
    -0.012913749,
    -0.27687806,
    -0.00081042293,
    0.8332573,
    -1.0331386,
    -0.5144214,
    -0.005624555,
    0.71696895,
    -0.81962454,
    -0.5723752,
    0.25761572,
    1.1193179,
    0.005045411,
    -0.03437448,
    0.008928416,
    0.048655495,
    -0.0016141674,
    0.003347816,
];
#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    0.9705593,
    0.98721755,
    0.7949509,
    -1.1216849,
    -1.2338798,
    -0.23274475,
    0.32748994,
    -0.11214956,
    0.07711801,
    -0.10487941,
    0.02845696,
    0.10086834,
    0.16160151,
    0.3341736,
    -0.05995856,
    -0.26130927,
    -0.09006036,
    0.007571606,
    0.009635687,
    -0.0014058612,
    0.000054205248,
    -0.3200169,
    0.50003904,
    0.9743529,
    -0.37046313,
    -0.33598095,
    -0.07004182,
    -0.028257336,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    0.23270999,
    -0.49306023,
    0.23059534,
    1.194533,
    -0.7898056,
    -0.5070829,
    -0.34842238,
    0.8463479,
    -0.0057374667,
    0.00015021767,
    0.008557079,
    -0.0009557083,
    0.41750264,
    -0.10066939,
    -0.009191279,
    -0.83416086,
    -0.20533037,
    -0.00008111913,
    0.39246783,
    0.24686013,
    -0.008808966,
    0.14961778,
    0.18501069,
    -0.0049592447,
    1.03499,
    0.39930764,
    0.002150652,
    -0.11435999,
    0.22246456,
    -0.004483435,
    0.61039376,
    0.7645328,
    0.008150065,
    -1.8293493,
    -0.0048414613,
    0.0040705632,
    1.883018,
    0.70056,
    1.0150641,
    0.008161059,
    0.833873,
    -3.4582224,
    -1.5093844,
    0.41522735,
    1.2880003,
    0.3600808,
    0.2124508,
    0.2928038,
    0.22869067,
    -0.98897296,
    -1.4287175,
    -0.0077824043,
    -0.36016065,
    0.9069506,
    -1.2873129,
    -1.3736019,
    -0.7554771,
    -0.89050514,
    0.62808895,
    -0.10252929,
    -0.002353027,
    0.008927224,
    0.009418681,
    -0.08795287,
    -0.0034205557,
    1.6940038,
    0.65724236,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    -0.00044795033,
    0.15347332,
    0.14927012,
    0.25764394,
    0.2447137,
    0.27844432,
    0.7183903,
    0.79589164,
    0.69361377,
    0.93700093,
    0.77688575,
    1.0438795,
    -0.47725853,
    0.023881366,
    0.10956399,
    0.6041755,
    0.7021375,
    0.9956894,
    1.1578636,
    1.1255516,
    1.2779299,
    1.2831495,
    1.311057,
    1.2934446,
    0.7101744,
    0.73263896,
    0.77619076,
    0.8653954,
    0.8186914,
    0.8584326,
    0.98251414,
    0.7959507,
    1.0613332,
    0.61214393,
    0.04162296,
    0.47685462,
    -0.18535407,
    -0.175548,
    0.025191614,
    0.31633365,
    0.044689283,
    0.08818814,
    -0.04582565,
    0.036502212,
    0.11076386,
    0.12404986,
    0.60829574,
    0.35141426,
    -0.032268483,
    -0.15010805,
    -0.15450484,
    0.7011735,
    -0.77606714,
    -0.432654,
    -0.1280988,
    0.12062097,
    0.5066281,
    -1.0205822,
    -0.7606904,
    -0.18055946,
    0.6164267,
    1.3433626,
    0.0029393125,
    0.012231762,
    -0.07691176,
    0.14723985,
    0.103527844,
    0.08759902,
    -0.0380222,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    0.9239916,
    1.0658056,
    0.32767886,
    -1.3773452,
    -1.2205111,
    -0.18455018,
    0.18703955,
    -0.33739582,
    0.107040286,
    -0.13799287,
    0.04032039,
    -0.07244814,
    0.017356727,
    0.21170275,
    0.46840444,
    0.114993624,
    0.014034444,
    0.14307249,
    -0.20988597,
    -0.3734138,
    -0.15064101,
    -0.22591127,
    -0.0012216881,
    -1.5660883,
    -1.3569065,
    -0.8834385,
    -0.24340129,
    0.69536746,
    3.468311,
    -0.12515569,
    -0.3330358,
    0.115885496,
    0.6791942,
    1.1523374,
    -0.4815706,
    -0.50592864,
    -0.44575518,
    -0.20072593,
    -0.023982264,
    -0.13255274,
    -0.49848878,
    0.026908068,
    1.0810503,
    -0.23284337,
    0.2975948,
    -0.19952308,
    0.060766786,
    0.59228855,
    0.77947485,
    -0.43266362,
    -0.6038049,
    -0.6426475,
    -0.1594748,
    0.21856675,
    -0.037826933,
    -0.7701855,
    -0.39146116,
    0.7421652,
    0.71338755,
    0.5477685,
    -0.03632942,
    0.18953447,
    -0.0055455267,
    -0.41482824,
    -0.20779432,
    0.103265464,
    0.06684493,
    0.06520464,
    0.4727541,
    0.23841536,
    -0.23156653,
    1.3550665,
    0.022679303,
    0.7580664,
    -0.096012466,
    -0.035782542,
    0.20072836,
    0.4227058,
    1.0294496,
    0.729622,
    -0.32706726,
    -0.43618256,
    0.29811546,
    1.8797696,
    0.45042554,
    2.8585482,
    2.0298252,
    0.74510956,
    -3.357371,
    -1.6245495,
    0.6767127,
    1.1721263,
    0.23134795,
    0.25102094,
    0.12928274,
    0.36491036,
    -0.8049694,
    -1.2677882,
    -0.79847604,
    -0.09092538,
    0.37991175,
    -1.3054652,
    -1.3071477,
    -1.4877341,
    -1.6804982,
    0.5861169,
    0.024586288,
    -0.14259067,
    -0.021774648,
    0.04211858,
    0.18130523,
    0.74014705,
    -0.04150984,
    -0.18024424,
    0.009428149,
    -0.04815042,
    2.2162173,
    0.95605534,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.14389691,
    0.14861599,
    0.21016096,
    0.26289055,
    0.29426488,
    0.2697997,
    0.41935468,
    0.5154811,
    0.5189208,
    0.6312286,
    0.5163997,
    0.7095309,
    -0.40372136,
    -0.17229083,
    -0.08402492,
    0.22461775,
    0.32553476,
    0.5386108,
    0.45318204,
    0.63134146,
    0.763742,
    0.7841039,
    0.82111675,
    0.7907069,
    0.37137604,
    0.4108737,
    0.48396173,
    0.5127213,
    0.5265846,
    0.50946397,
    0.522094,
    0.46919465,
    0.63071007,
    0.5474945,
    0.29245657,
    0.48472342,
    -0.23528779,
    -0.04572703,
    -0.00088525214,
    0.15706137,
    0.14138941,
    0.08143665,
    -0.012585025,
    0.12482873,
    0.016435517,
    0.16839688,
    0.5649024,
    0.3192357,
    -0.025385296,
    -0.076988645,
    -0.115113735,
    0.43385288,
    -0.32607457,
    -0.24166256,
    -0.15374532,
    -0.06544677,
    0.090924904,
    0.2354019,
    -0.39573103,
    -0.33551803,
    -0.1949905,
    0.024735041,
    0.31291002,
    0.58010185,
    -0.0008957982,
    0.008336878,
    0.036577567,
    0.010293869,
    0.061720997,
    0.028714254,
    0.112023935,
    0.45978305,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    0.8856777,
    1.0309737,
    -0.2668393,
    -1.5111188,
    -0.9833904,
    -0.28392243,
    0.233874,
    -0.55706626,
    0.07707858,
    -0.12566188,
    0.03373011,
    -0.49324363,
    -0.10588563,
    -0.31801367,
    0.99447876,
    0.35865545,
    -0.14184473,
    -0.089778855,
    -0.2651551,
    -0.15309167,
    -0.21001229,
    -0.29719508,
    -0.13264805,
    -0.7774708,
    0.06268712,
    -1.1399537,
    0.04832241,
    0.17936705,
    1.2645118,
    -0.2286255,
    -0.423249,
    -0.22845915,
    0.12837423,
    0.6773418,
    0.61250913,
    -0.37855217,
    -0.59575045,
    -0.57231545,
    -0.3925822,
    -0.36769193,
    -0.0051257345,
    -0.4019266,
    -0.46798185,
    -0.45391053,
    -0.07992377,
    0.784552,
    -0.02027781,
    0.33739612,
    -0.21887429,
    -0.19537233,
    0.047899283,
    0.48282516,
    0.12257118,
    -0.25405905,
    -0.44921508,
    -0.60503787,
    -0.48140356,
    -0.25264627,
    -0.24657246,
    -0.58630306,
    -1.0187641,
    -1.0791906,
    -0.7391521,
    0.6136969,
    2.155903,
    0.3699882,
    0.08727205,
    0.07774724,
    0.063104875,
    -0.36350924,
    0.3086082,
    0.75067997,
    -0.10938692,
    -0.127779,
    0.018054415,
    0.2615431,
    0.03386015,
    1.7297871,
    0.073516004,
    0.5440823,
    -0.044452865,
    -0.066029206,
    0.12650345,
    0.31867576,
    0.78875136,
    0.58890563,
    -0.084182285,
    -0.2170496,
    -0.015042416,
    2.0349672,
    0.2594825,
    3.7469888,
    1.8662666,
    0.5177328,
    -3.5731,
    -1.7108436,
    1.1822457,
    1.4144622,
    0.35493565,
    0.50401235,
    0.10802065,
    0.21295702,
    -0.5864955,
    -0.92556405,
    -0.82835895,
    -0.113253884,
    0.2617109,
    -0.90768754,
    -1.035013,
    -1.3063961,
    -1.4734126,
    0.48339817,
    0.00014802738,
    0.020499812,
    -0.089908496,
    -0.043226067,
    0.04008616,
    -0.017136728,
    -0.676866,
    0.08543549,
    0.07068386,
    -0.1301679,
    0.04199576,
    0.03622349,
    0.008433012,
    0.04616101,
    1.0352328,
    0.91553694,
];
