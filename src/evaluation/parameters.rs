use crate::position::num_square_symmetries;

pub const NUM_VALUE_FEATURES_4S: usize = 51;
pub const NUM_POLICY_FEATURES_4S: usize = 124;

pub const NUM_VALUE_FEATURES_5S: usize = 69;
pub const NUM_POLICY_FEATURES_5S: usize = 143;

pub const NUM_VALUE_FEATURES_6S: usize = 72;
pub const NUM_POLICY_FEATURES_6S: usize = 153;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_stack_psqt: &'a mut [f32],
    pub their_stack_psqt: &'a mut [f32],
    pub side_to_move: &'a mut [f32],
    pub flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub capstone_over_own_piece: &'a mut [f32],
    pub capstone_on_stack: &'a mut [f32],
    pub standing_stone_on_stack: &'a mut [f32],
    pub flat_stone_next_to_our_stack: &'a mut [f32],
    pub standing_stone_next_to_our_stack: &'a mut [f32],
    pub capstone_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control: &'a mut [f32],
    pub block_their_line: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>());

        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (their_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (side_to_move, coefficients) = coefficients.split_at_mut(3);
        let (flatstone_lead, coefficients) = coefficients.split_at_mut(3);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (capstone_over_own_piece, coefficients) = coefficients.split_at_mut(1);
        let (capstone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (flat_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (capstone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control, coefficients) = coefficients.split_at_mut(S + 1);
        let (block_their_line, coefficients) = coefficients.split_at_mut(S + 1);

        assert!(coefficients.is_empty());

        ValueFeatures {
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_stack_psqt,
            their_stack_psqt,
            side_to_move,
            flatstone_lead,
            i_number_of_groups,
            critical_squares,
            capstone_over_own_piece,
            capstone_on_stack,
            standing_stone_on_stack,
            flat_stone_next_to_our_stack,
            standing_stone_next_to_our_stack,
            capstone_next_to_our_stack,
            num_lines_occupied,
            line_control,
            block_their_line,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub decline_win: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_our_critical_square: &'a mut [f32],
    pub place_their_critical_square: &'a mut [f32],
    pub ignore_their_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub attack_strong_stack_with_wall: &'a mut [f32],
    pub attack_strong_stack_with_cap: &'a mut [f32],
    pub attack_last_movement: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub stack_movement_that_gives_us_top_pieces: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub recapture_stack_pure: &'a mut [f32],
    pub recapture_stack_impure: &'a mut [f32],
    pub continue_spread: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
    pub spread_that_connects_groups_to_win: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (decline_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_our_critical_square, coefficients) = coefficients.split_at_mut(1);
        let (place_their_critical_square, coefficients) = coefficients.split_at_mut(4);
        let (ignore_their_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (attack_strong_stack_with_wall, coefficients) = coefficients.split_at_mut(6);
        let (attack_strong_stack_with_cap, coefficients) = coefficients.split_at_mut(6);
        let (attack_last_movement, coefficients) = coefficients.split_at_mut(4);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (stack_movement_that_gives_us_top_pieces, coefficients) = coefficients.split_at_mut(6);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (recapture_stack_pure, coefficients) = coefficients.split_at_mut(3);
        let (recapture_stack_impure, coefficients) = coefficients.split_at_mut(3);
        let (continue_spread, coefficients) = coefficients.split_at_mut(3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(3);
        let (spread_that_connects_groups_to_win, coefficients) = coefficients.split_at_mut(1);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            attack_strong_stack_with_wall,
            attack_strong_stack_with_cap,
            attack_last_movement,
            move_role_bonus,
            stack_movement_that_gives_us_top_pieces,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            recapture_stack_pure,
            recapture_stack_impure,
            continue_spread,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    0.40710354,
    0.54004306,
    0.7314182,
    1.0928891,
    1.0292282,
    1.3468512,
    0.0060105007,
    0.0055509824,
    -0.00028526317,
    1.3862512,
    1.7173628,
    1.6419909,
    0.9690684,
    1.0156716,
    1.0867381,
    1.3008595,
    1.4003952,
    1.7866403,
    0.48352754,
    0.10772651,
    1.0677989,
    -0.2995102,
    -0.2784462,
    0.4824724,
    0.3578643,
    0.30005231,
    0.112963594,
    0.03649128,
    -0.0068652583,
    -0.0045327637,
    -0.007574806,
    -0.001304483,
    0.7344016,
    -0.012913749,
    -0.27687806,
    -0.00081042293,
    0.8332573,
    -1.0331386,
    -0.5144214,
    -0.005624555,
    0.71696895,
    -0.81962454,
    -0.5723752,
    0.25761572,
    1.1193179,
    0.005045411,
    -0.03437448,
    0.008928416,
    0.048655495,
    -0.0016141674,
    0.003347816,
];
#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    -1.9790323,
    0.6635048,
    0.7590186,
    -1.6616378,
    -1.6032779,
    -0.29283533,
    0.34598956,
    -0.24775946,
    0.06941018,
    -0.23771732,
    0.07354897,
    0.121306986,
    0.17915793,
    0.36742413,
    -0.057369396,
    -0.30750284,
    -0.08744353,
    0.007571606,
    0.009635687,
    -0.0014058612,
    0.019580685,
    -0.27458492,
    0.5604471,
    0.99147564,
    -0.3492354,
    -0.31444517,
    -0.21028784,
    -0.012752244,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    0.24347597,
    -0.48842537,
    0.2640587,
    1.2881564,
    -0.69283724,
    -0.48425114,
    -0.42219353,
    0.7183419,
    -0.0057374667,
    0.00015021767,
    0.008557079,
    -0.0009557083,
    0.40718666,
    0.012789938,
    -0.009191279,
    -0.5925086,
    -0.20619315,
    -0.00008111913,
    0.35016102,
    0.23707832,
    -0.008808966,
    0.290627,
    -0.069852725,
    -0.0049592447,
    0.99946374,
    0.76914257,
    0.002150652,
    -0.013426395,
    -0.074204355,
    -0.004483435,
    0.7258902,
    0.7198162,
    0.008150065,
    -2.2763636,
    -0.6399964,
    0.0040705632,
    1.8480976,
    0.68850136,
    1.1022929,
    0.008161059,
    0.8865136,
    -6.288117,
    -1.7663119,
    0.40729663,
    1.2964057,
    0.35657126,
    0.23659764,
    0.30481595,
    0.35512918,
    0.17240506,
    0.30986613,
    -0.17925605,
    0.27270862,
    0.008410923,
    0.0043121455,
    -0.008000903,
    0.0010137418,
    -0.006815267,
    0.0031001903,
    -0.002478423,
    -0.002353027,
    0.2763995,
    -0.05892622,
    -0.007463541,
    -0.009312019,
    -1.478834,
    -1.4162121,
    0.0035254955,
    0.29122216,
    0.80035096,
    -2.6752632,
    -3.0993588,
    -0.49867862,
    -0.59026706,
    0.49919912,
    -0.14191727,
    0.0012618108,
    -0.0039176345,
    0.0039970186,
    1.1586714,
    0.5883366,
    0.00952702,
    -0.6418301,
    -0.4389178,
    -0.0077517964,
    0.0152199855,
    -0.21746123,
    -0.0027733874,
    1.0480798,
    1.6982555,
    0.8132992,
    1.5547135,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    -0.00044795033,
    0.15347332,
    0.14927012,
    0.25764394,
    0.2447137,
    0.27844432,
    0.7183903,
    0.79589164,
    0.69361377,
    0.93700093,
    0.77688575,
    1.0438795,
    -0.47725853,
    0.023881366,
    0.10956399,
    0.6041755,
    0.7021375,
    0.9956894,
    1.1578636,
    1.1255516,
    1.2779299,
    1.2831495,
    1.311057,
    1.2934446,
    0.7101744,
    0.73263896,
    0.77619076,
    0.8653954,
    0.8186914,
    0.8584326,
    0.98251414,
    0.7959507,
    1.0613332,
    0.61214393,
    0.04162296,
    0.47685462,
    -0.18535407,
    -0.175548,
    0.025191614,
    0.31633365,
    0.044689283,
    0.08818814,
    -0.04582565,
    0.036502212,
    0.11076386,
    0.12404986,
    0.60829574,
    0.35141426,
    -0.032268483,
    -0.15010805,
    -0.15450484,
    0.7011735,
    -0.77606714,
    -0.432654,
    -0.1280988,
    0.12062097,
    0.5066281,
    -1.0205822,
    -0.7606904,
    -0.18055946,
    0.6164267,
    1.3433626,
    0.0029393125,
    0.012231762,
    -0.07691176,
    0.14723985,
    0.103527844,
    0.08759902,
    -0.0380222,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    -2.0074873,
    1.0095649,
    0.390653,
    -1.7316756,
    -1.4182055,
    -0.097502075,
    0.20336011,
    -0.27927962,
    0.102045596,
    -0.14980595,
    0.042571075,
    -0.041878235,
    0.05111496,
    0.24591348,
    0.49295765,
    0.14827624,
    0.045839354,
    0.1417311,
    -0.16396683,
    -0.2923096,
    -0.10287897,
    -0.20198378,
    -0.0018064501,
    -1.7699903,
    -1.2956213,
    -0.8693279,
    -0.093668155,
    0.8032697,
    3.6190786,
    -0.053545535,
    -0.2674883,
    0.17899376,
    0.73339903,
    1.2742288,
    -0.34036723,
    -0.34523696,
    -0.31054163,
    -0.25286123,
    -0.015380202,
    -0.08189021,
    -0.39423433,
    0.10193758,
    1.4368993,
    -0.25885424,
    0.37040058,
    -0.13174026,
    0.13002218,
    0.66583985,
    0.8724443,
    -0.33060348,
    -0.54745775,
    -0.566479,
    -0.049266573,
    0.26735672,
    -0.011369339,
    -0.7430124,
    -0.27126795,
    0.8598856,
    0.9816294,
    0.52458626,
    0.005633065,
    0.26556724,
    -0.022619128,
    -0.4161234,
    -0.26253513,
    0.12833025,
    -0.035590015,
    -0.00064309855,
    0.48131302,
    0.22890238,
    -0.41158342,
    1.353339,
    0.07758277,
    0.73674273,
    -0.096122384,
    0.05330908,
    0.14441606,
    0.39780757,
    0.9416483,
    0.81068194,
    -0.28227076,
    -0.5598097,
    0.08422815,
    1.833414,
    0.41565245,
    2.648862,
    2.1226661,
    0.8122779,
    -4.078281,
    -1.7926381,
    0.6804858,
    1.1704923,
    0.23384008,
    0.23628627,
    0.13219656,
    0.33742964,
    0.18738356,
    0.17882517,
    -0.00015572613,
    0.17737935,
    -0.018647544,
    0.3688124,
    0.35199136,
    -0.022185761,
    0.026815679,
    0.0011762547,
    -0.10723197,
    -0.11284724,
    0.2049571,
    -0.054322325,
    0.25247765,
    -0.08779534,
    -0.7001975,
    -0.5137014,
    -0.3834813,
    -0.010224121,
    0.33638108,
    -0.6368238,
    -0.91309136,
    -0.9574017,
    -1.1793542,
    0.46288955,
    -0.003992782,
    -0.12915224,
    -0.05296294,
    -0.015118532,
    0.08190053,
    0.5150048,
    -0.088686846,
    -0.15138395,
    1.5664599,
    0.49419478,
    1.0367608,
    -0.29141602,
    -0.013334119,
    0.24864556,
    0.09766058,
    0.041246273,
    -0.26197642,
    0.80500567,
    2.4016967,
    1.1946371,
    2.5177476,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.046171084,
    0.18331811,
    0.22388674,
    0.40089765,
    0.39143583,
    0.38337028,
    0.18175879,
    0.9748611,
    0.8954859,
    1.0704179,
    1.1226778,
    1.2997634,
    -0.12113264,
    0.23441482,
    0.47019416,
    0.74714774,
    0.8460779,
    1.1941108,
    1.1458044,
    1.4042677,
    1.4908792,
    1.3719292,
    1.5380452,
    1.4982508,
    0.6325053,
    0.91657126,
    0.88002807,
    0.9217417,
    0.91336334,
    0.91496414,
    1.0705668,
    0.90843934,
    1.0134091,
    0.85562843,
    0.34161913,
    0.43768582,
    -0.30401027,
    -0.19501288,
    0.013981101,
    0.28825554,
    0.31932393,
    0.16409515,
    -0.06394048,
    0.07299698,
    0.18443385,
    0.8699935,
    0.6562437,
    0.49707237,
    -0.042350415,
    -0.1975843,
    -0.20159936,
    0.8737253,
    -0.76951206,
    -0.48211715,
    -0.27948415,
    -0.034151398,
    0.19642136,
    0.49798742,
    -1.2477565,
    -0.97310567,
    -0.4381552,
    0.22319506,
    0.91539365,
    1.520835,
    0.0074355192,
    0.046738762,
    0.08225036,
    -0.0037264838,
    0.101646885,
    0.06553965,
    0.19098015,
    0.18686743,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    -2.5139346,
    1.3120424,
    -0.061054472,
    -1.8327705,
    -1.4166275,
    -0.20604248,
    0.37557608,
    -0.32764688,
    0.08591768,
    -0.0393216,
    0.06201966,
    -0.31926396,
    -0.107125655,
    -0.08237866,
    0.5353928,
    0.44863132,
    0.23670246,
    -0.08253052,
    -0.16968001,
    -0.2516948,
    -0.12354829,
    -0.1803525,
    0.17259961,
    -0.4810047,
    -0.77371556,
    -0.38871178,
    -0.6314876,
    0.31847984,
    2.4278512,
    0.007681203,
    -0.33045557,
    -0.1276175,
    0.24468903,
    0.69960076,
    0.8796196,
    -0.29020995,
    -0.282409,
    -0.25329885,
    -0.18436423,
    -0.2704178,
    -0.0059713027,
    -0.15357734,
    -0.12644206,
    0.46193314,
    0.87592053,
    0.14876495,
    -0.17816882,
    0.36233172,
    -0.09623273,
    -0.028873716,
    0.2958829,
    0.5847075,
    0.2942554,
    -0.14411725,
    -0.42229313,
    -0.52251524,
    -0.33841413,
    -0.035570968,
    0.19932495,
    -0.93833846,
    -0.79140794,
    -0.5286593,
    0.3690904,
    1.0525792,
    1.8508235,
    0.6115674,
    0.19420323,
    0.50512403,
    0.1289528,
    -0.5444197,
    0.4725817,
    0.43169928,
    -0.2563478,
    -0.09340675,
    0.17327616,
    0.45247123,
    -0.1368669,
    1.7999258,
    0.25690854,
    0.8568043,
    -0.17000806,
    -0.27876556,
    -0.24117008,
    0.5576039,
    1.1124727,
    1.3091753,
    -0.115266636,
    -0.46108556,
    -0.18387252,
    2.2015274,
    -0.091255166,
    3.1406078,
    3.2257798,
    0.7940637,
    -3.3670285,
    -1.5545453,
    0.8014684,
    1.3128735,
    0.45006284,
    0.43882364,
    0.10964857,
    0.40851137,
    0.24752317,
    -0.048099812,
    0.12565917,
    0.031560548,
    -0.016606554,
    0.23956588,
    -0.078516245,
    -0.15923554,
    0.0019035902,
    0.004777651,
    0.1048602,
    0.05616757,
    0.18050759,
    -0.07814965,
    0.026108887,
    -0.026185447,
    -0.6936778,
    0.0339704,
    0.013252612,
    0.58927536,
    -0.2079101,
    -0.45164153,
    -0.9492994,
    -0.7681746,
    -0.9463457,
    0.41133025,
    -0.009257248,
    -0.0122607825,
    -0.11512207,
    -0.03006277,
    -0.060749587,
    -0.03736238,
    -0.27369183,
    -0.025256904,
    0.2802134,
    -0.28554705,
    -0.1880751,
    -0.096624054,
    1.7693182,
    0.98530036,
    1.4078017,
    -0.12569852,
    0.050473012,
    0.30289274,
    0.34114295,
    0.011120233,
    -0.21933225,
    0.8508829,
    2.4156954,
    1.2283025,
    3.4309475,
];
