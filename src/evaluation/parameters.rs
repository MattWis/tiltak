use crate::position::num_square_symmetries;

pub const NUM_VALUE_FEATURES_4S: usize = 51;
pub const NUM_POLICY_FEATURES_4S: usize = 98;

pub const NUM_VALUE_FEATURES_5S: usize = 69;
pub const NUM_POLICY_FEATURES_5S: usize = 117;

pub const NUM_VALUE_FEATURES_6S: usize = 72;
pub const NUM_POLICY_FEATURES_6S: usize = 127;

#[derive(Debug)]
pub struct ValueFeatures<'a> {
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_stack_psqt: &'a mut [f32],
    pub their_stack_psqt: &'a mut [f32],
    pub side_to_move: &'a mut [f32],
    pub flatstone_lead: &'a mut [f32],
    pub i_number_of_groups: &'a mut [f32],
    pub critical_squares: &'a mut [f32],
    pub capstone_over_own_piece: &'a mut [f32],
    pub capstone_on_stack: &'a mut [f32],
    pub standing_stone_on_stack: &'a mut [f32],
    pub flat_stone_next_to_our_stack: &'a mut [f32],
    pub standing_stone_next_to_our_stack: &'a mut [f32],
    pub capstone_next_to_our_stack: &'a mut [f32],
    pub num_lines_occupied: &'a mut [f32],
    pub line_control: &'a mut [f32],
    pub block_their_line: &'a mut [f32],
}

impl<'a> ValueFeatures<'a> {
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> Self {
        assert_eq!(coefficients.len(), num_value_features::<S>());

        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (their_stack_psqt, coefficients) =
            coefficients.split_at_mut(num_square_symmetries::<S>());
        let (side_to_move, coefficients) = coefficients.split_at_mut(3);
        let (flatstone_lead, coefficients) = coefficients.split_at_mut(3);
        let (i_number_of_groups, coefficients) = coefficients.split_at_mut(3);
        let (critical_squares, coefficients) = coefficients.split_at_mut(6);
        let (capstone_over_own_piece, coefficients) = coefficients.split_at_mut(1);
        let (capstone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_on_stack, coefficients) = coefficients.split_at_mut(1);
        let (flat_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (standing_stone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (capstone_next_to_our_stack, coefficients) = coefficients.split_at_mut(1);
        let (num_lines_occupied, coefficients) = coefficients.split_at_mut(S + 1);
        let (line_control, coefficients) = coefficients.split_at_mut(S + 1);
        let (block_their_line, coefficients) = coefficients.split_at_mut(S + 1);

        assert!(coefficients.is_empty());

        ValueFeatures {
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_stack_psqt,
            their_stack_psqt,
            side_to_move,
            flatstone_lead,
            i_number_of_groups,
            critical_squares,
            capstone_over_own_piece,
            capstone_on_stack,
            standing_stone_on_stack,
            flat_stone_next_to_our_stack,
            standing_stone_next_to_our_stack,
            capstone_next_to_our_stack,
            num_lines_occupied,
            line_control,
            block_their_line,
        }
    }
}

#[derive(Debug)]
pub struct PolicyFeatures<'a> {
    pub decline_win: &'a mut [f32],
    pub place_to_win: &'a mut [f32],
    pub place_to_draw: &'a mut [f32],
    pub place_to_loss: &'a mut [f32],
    pub place_to_allow_opponent_to_end: &'a mut [f32],
    pub two_flats_left: &'a mut [f32],
    pub three_flats_left: &'a mut [f32],
    pub flat_psqt: &'a mut [f32],
    pub wall_psqt: &'a mut [f32],
    pub cap_psqt: &'a mut [f32],
    pub our_road_stones_in_line: &'a mut [f32],
    pub their_road_stones_in_line: &'a mut [f32],
    pub extend_single_group_base: &'a mut [f32],
    pub extend_single_group_linear: &'a mut [f32],
    pub extend_single_group_to_new_line_base: &'a mut [f32],
    pub extend_single_group_to_new_line_linear: &'a mut [f32],
    pub merge_two_groups_base: &'a mut [f32],
    pub merge_two_groups_linear: &'a mut [f32],
    pub block_merger_base: &'a mut [f32],
    pub block_merger_linear: &'a mut [f32],
    pub place_our_critical_square: &'a mut [f32],
    pub place_their_critical_square: &'a mut [f32],
    pub ignore_their_critical_square: &'a mut [f32],
    pub next_to_our_last_stone: &'a mut [f32],
    pub next_to_their_last_stone: &'a mut [f32],
    pub diagonal_to_our_last_stone: &'a mut [f32],
    pub diagonal_to_their_last_stone: &'a mut [f32],
    pub attack_strong_flats: &'a mut [f32],
    pub blocking_stone_blocks_extensions_of_two_flats: &'a mut [f32],
    pub move_role_bonus: &'a mut [f32],
    pub stack_movement_that_gives_us_top_pieces: &'a mut [f32],
    pub stack_captured_by_movement: &'a mut [f32],
    pub stack_capture_in_strong_line: &'a mut [f32],
    pub stack_capture_in_strong_line_cap: &'a mut [f32],
    pub move_cap_onto_strong_line: &'a mut [f32],
    pub move_cap_onto_strong_line_with_critical_square: &'a mut [f32],
    pub move_onto_critical_square: &'a mut [f32],
    pub spread_that_connects_groups_to_win: &'a mut [f32],
}

impl<'a> PolicyFeatures<'a> {
    #[inline(never)]
    pub fn new<const S: usize>(coefficients: &'a mut [f32]) -> PolicyFeatures<'a> {
        assert_eq!(coefficients.len(), num_policy_features::<S>());

        let (decline_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_win, coefficients) = coefficients.split_at_mut(1);
        let (place_to_draw, coefficients) = coefficients.split_at_mut(1);
        let (place_to_loss, coefficients) = coefficients.split_at_mut(1);
        let (place_to_allow_opponent_to_end, coefficients) = coefficients.split_at_mut(3);
        let (two_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (three_flats_left, coefficients) = coefficients.split_at_mut(2);
        let (flat_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (wall_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (cap_psqt, coefficients) = coefficients.split_at_mut(num_square_symmetries::<S>());
        let (our_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (their_road_stones_in_line, coefficients) = coefficients.split_at_mut(S * 3);
        let (extend_single_group_to_new_line_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_to_new_line_linear, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_base, coefficients) = coefficients.split_at_mut(3);
        let (extend_single_group_linear, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_base, coefficients) = coefficients.split_at_mut(3);
        let (merge_two_groups_linear, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_base, coefficients) = coefficients.split_at_mut(3);
        let (block_merger_linear, coefficients) = coefficients.split_at_mut(3);
        let (place_our_critical_square, coefficients) = coefficients.split_at_mut(1);
        let (place_their_critical_square, coefficients) = coefficients.split_at_mut(4);
        let (ignore_their_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (next_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (next_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_our_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (diagonal_to_their_last_stone, coefficients) = coefficients.split_at_mut(1);
        let (attack_strong_flats, coefficients) = coefficients.split_at_mut(1);
        let (blocking_stone_blocks_extensions_of_two_flats, coefficients) =
            coefficients.split_at_mut(1);
        let (move_role_bonus, coefficients) = coefficients.split_at_mut(3);
        let (stack_movement_that_gives_us_top_pieces, coefficients) = coefficients.split_at_mut(6);
        let (stack_captured_by_movement, coefficients) = coefficients.split_at_mut(1);
        let (stack_capture_in_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (stack_capture_in_strong_line_cap, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line, coefficients) = coefficients.split_at_mut(S - 3);
        let (move_cap_onto_strong_line_with_critical_square, coefficients) =
            coefficients.split_at_mut(S - 3);
        let (move_onto_critical_square, coefficients) = coefficients.split_at_mut(2);
        let (spread_that_connects_groups_to_win, coefficients) = coefficients.split_at_mut(1);

        assert!(coefficients.is_empty());

        PolicyFeatures {
            decline_win,
            place_to_win,
            place_to_draw,
            place_to_loss,
            place_to_allow_opponent_to_end,
            two_flats_left,
            three_flats_left,
            flat_psqt,
            wall_psqt,
            cap_psqt,
            our_road_stones_in_line,
            their_road_stones_in_line,
            extend_single_group_base,
            extend_single_group_linear,
            extend_single_group_to_new_line_base,
            extend_single_group_to_new_line_linear,
            merge_two_groups_base,
            merge_two_groups_linear,
            block_merger_base,
            block_merger_linear,
            place_our_critical_square,
            place_their_critical_square,
            ignore_their_critical_square,
            next_to_our_last_stone,
            next_to_their_last_stone,
            diagonal_to_our_last_stone,
            diagonal_to_their_last_stone,
            attack_strong_flats,
            blocking_stone_blocks_extensions_of_two_flats,
            move_role_bonus,
            stack_movement_that_gives_us_top_pieces,
            stack_captured_by_movement,
            stack_capture_in_strong_line,
            stack_capture_in_strong_line_cap,
            move_cap_onto_strong_line,
            move_cap_onto_strong_line_with_critical_square,
            move_onto_critical_square,
            spread_that_connects_groups_to_win,
        }
    }
}

pub fn num_value_features<const S: usize>() -> usize {
    match S {
        4 => NUM_VALUE_FEATURES_4S,
        5 => NUM_VALUE_FEATURES_5S,
        6 => NUM_VALUE_FEATURES_6S,
        _ => unimplemented!(),
    }
}

pub fn num_policy_features<const S: usize>() -> usize {
    match S {
        4 => NUM_POLICY_FEATURES_4S,
        5 => NUM_POLICY_FEATURES_5S,
        6 => NUM_POLICY_FEATURES_6S,
        _ => unimplemented!(),
    }
}

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_4S: [f32; NUM_VALUE_FEATURES_4S] = [
    0.40710354,
    0.54004306,
    0.7314182,
    1.0928891,
    1.0292282,
    1.3468512,
    0.0060105007,
    0.0055509824,
    -0.00028526317,
    1.3862512,
    1.7173628,
    1.6419909,
    0.9690684,
    1.0156716,
    1.0867381,
    1.3008595,
    1.4003952,
    1.7866403,
    0.48352754,
    0.10772651,
    1.0677989,
    -0.2995102,
    -0.2784462,
    0.4824724,
    0.3578643,
    0.30005231,
    0.112963594,
    0.03649128,
    -0.0068652583,
    -0.0045327637,
    -0.007574806,
    -0.001304483,
    0.7344016,
    -0.012913749,
    -0.27687806,
    -0.00081042293,
    0.8332573,
    -1.0331386,
    -0.5144214,
    -0.005624555,
    0.71696895,
    -0.81962454,
    -0.5723752,
    0.25761572,
    1.1193179,
    0.005045411,
    -0.03437448,
    0.008928416,
    0.048655495,
    -0.0016141674,
    0.003347816,
];
#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_4S: [f32; NUM_POLICY_FEATURES_4S] = [
    -1.9900199,
    0.80215514,
    0.76777774,
    -1.5944471,
    -1.4701896,
    -0.323798,
    0.3653675,
    -0.13015948,
    0.04835023,
    -0.15747197,
    0.04384434,
    0.11784789,
    0.17743471,
    0.36803487,
    0.009719903,
    -0.23730052,
    -0.13365264,
    0.007571606,
    0.009635687,
    -0.0014058612,
    0.017690146,
    -0.27685797,
    0.557624,
    0.98931867,
    -0.35110104,
    -0.33877173,
    -0.019225147,
    0.004540281,
    0.0061870757,
    -0.0077467104,
    -0.007937893,
    0.0076041985,
    0.24545565,
    -0.4873144,
    0.26517627,
    1.2748073,
    -0.7896114,
    -0.52296865,
    -0.29537287,
    0.9091781,
    -0.0057374667,
    0.00015021767,
    0.008557079,
    -0.0009557083,
    0.47634086,
    -0.10862592,
    -0.009191279,
    -0.70591575,
    -0.21089505,
    -0.00008111913,
    0.28704628,
    0.27271023,
    -0.008808966,
    0.36348245,
    0.23216178,
    -0.0049592447,
    1.0017228,
    0.58244073,
    0.002150652,
    -0.026806884,
    0.2843436,
    -0.004483435,
    0.76615465,
    0.9028226,
    0.008150065,
    -2.4275672,
    -0.05671735,
    0.0040705632,
    1.8568885,
    0.71302485,
    1.0567782,
    0.008161059,
    0.83865815,
    -6.148466,
    -1.8310261,
    0.40775132,
    1.2960622,
    0.3567483,
    0.23715554,
    0.30411485,
    0.11219839,
    -1.4618988,
    -1.9102597,
    -0.0077824043,
    0.2786944,
    0.86229867,
    -2.6564248,
    -3.0885568,
    -0.97960854,
    -1.1448412,
    0.64061403,
    -0.147664,
    -0.002353027,
    0.008927224,
    0.009418681,
    1.0982375,
    0.6184283,
    1.3567312,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_5S: [f32; NUM_VALUE_FEATURES_5S] = [
    -0.00044795033,
    0.15347332,
    0.14927012,
    0.25764394,
    0.2447137,
    0.27844432,
    0.7183903,
    0.79589164,
    0.69361377,
    0.93700093,
    0.77688575,
    1.0438795,
    -0.47725853,
    0.023881366,
    0.10956399,
    0.6041755,
    0.7021375,
    0.9956894,
    1.1578636,
    1.1255516,
    1.2779299,
    1.2831495,
    1.311057,
    1.2934446,
    0.7101744,
    0.73263896,
    0.77619076,
    0.8653954,
    0.8186914,
    0.8584326,
    0.98251414,
    0.7959507,
    1.0613332,
    0.61214393,
    0.04162296,
    0.47685462,
    -0.18535407,
    -0.175548,
    0.025191614,
    0.31633365,
    0.044689283,
    0.08818814,
    -0.04582565,
    0.036502212,
    0.11076386,
    0.12404986,
    0.60829574,
    0.35141426,
    -0.032268483,
    -0.15010805,
    -0.15450484,
    0.7011735,
    -0.77606714,
    -0.432654,
    -0.1280988,
    0.12062097,
    0.5066281,
    -1.0205822,
    -0.7606904,
    -0.18055946,
    0.6164267,
    1.3433626,
    0.0029393125,
    0.012231762,
    -0.07691176,
    0.14723985,
    0.103527844,
    0.08759902,
    -0.0380222,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_5S: [f32; NUM_POLICY_FEATURES_5S] = [
    -1.9609294,
    1.0981543,
    0.3988164,
    -1.5892712,
    -1.3611382,
    -0.07125687,
    0.20098692,
    -0.2605986,
    0.09679922,
    -0.13678423,
    0.039863057,
    -0.043061834,
    0.050104935,
    0.24567512,
    0.49231178,
    0.14813785,
    0.045413606,
    0.17179064,
    -0.19081703,
    -0.34360752,
    -0.15542339,
    -0.22147788,
    0.008163848,
    -1.7398263,
    -1.3043951,
    -0.8718896,
    -0.10294263,
    0.79298425,
    3.6059377,
    -0.052966665,
    -0.2680197,
    0.17717111,
    0.73179185,
    1.270329,
    -0.42581463,
    -0.43886966,
    -0.3495604,
    -0.26323482,
    -0.0072219716,
    -0.07507791,
    -0.39025036,
    0.091781236,
    1.3954961,
    -0.24584064,
    0.37072593,
    -0.13197759,
    0.12937964,
    0.6642141,
    0.86733776,
    -0.3738837,
    -0.56320214,
    -0.6432888,
    -0.104936644,
    0.23854534,
    -0.011520511,
    -0.74306643,
    -0.2800917,
    0.85558146,
    0.96721166,
    0.5272692,
    0.029164847,
    0.27274844,
    -0.031284593,
    -0.42671484,
    -0.24883313,
    0.12756285,
    -0.037409928,
    -0.0062846034,
    0.48081583,
    0.31906295,
    -0.4063787,
    1.3556331,
    0.05964338,
    0.7603684,
    -0.09894514,
    0.13571423,
    0.16119717,
    0.3968406,
    0.96991074,
    0.81680334,
    -0.28304204,
    -0.3359314,
    0.12322658,
    1.8370259,
    0.42000064,
    2.9909816,
    2.1332524,
    0.76566225,
    -4.070923,
    -1.834361,
    0.68117744,
    1.1690274,
    0.23409538,
    0.23500128,
    0.13236217,
    0.3398322,
    -0.7021275,
    -1.1464783,
    -0.6417651,
    0.1774771,
    0.27952576,
    -1.1653887,
    -1.6092352,
    -1.5153509,
    -1.7967634,
    0.59469724,
    0.035043485,
    -0.14599757,
    -0.041036535,
    0.04537949,
    0.124508575,
    0.4892138,
    -0.069492124,
    -0.1426198,
    0.86491776,
    0.9123078,
    2.2782326,
];

#[allow(clippy::unreadable_literal)]
pub const VALUE_PARAMS_6S: [f32; NUM_VALUE_FEATURES_6S] = [
    0.046092786,
    0.18308389,
    0.22346771,
    0.4001133,
    0.39070478,
    0.3827575,
    0.17992534,
    0.97166127,
    0.8919975,
    1.0670028,
    1.1189914,
    1.2956272,
    -0.12200019,
    0.23509145,
    0.4679745,
    0.74504983,
    0.84414774,
    1.1921116,
    1.1404821,
    1.4005679,
    1.486935,
    1.3683515,
    1.5343978,
    1.4944263,
    0.6299443,
    0.9141197,
    0.87706536,
    0.91915566,
    0.9109569,
    0.9127421,
    1.0697219,
    0.9063292,
    1.0105692,
    0.85633725,
    0.34001714,
    0.43572053,
    -0.3034616,
    -0.1948995,
    0.0138727855,
    0.28689146,
    0.3191271,
    0.16383348,
    -0.06425284,
    0.073011644,
    0.18396975,
    0.86172646,
    0.6544495,
    0.49602732,
    -0.042417943,
    -0.19711573,
    -0.20116742,
    0.8738594,
    -0.76898,
    -0.48203728,
    -0.27963334,
    -0.034250956,
    0.19617075,
    0.49774066,
    -1.2448691,
    -0.970981,
    -0.43712255,
    0.22251529,
    0.9133133,
    1.5175506,
    0.0074355192,
    0.046493303,
    0.08159627,
    -0.0034979905,
    0.10106625,
    0.0652795,
    0.18955356,
    0.18425512,
];

#[allow(clippy::unreadable_literal)]
pub const POLICY_PARAMS_6S: [f32; NUM_POLICY_FEATURES_6S] = [
    -2.8685586,
    1.3762591,
    -0.06527791,
    -1.9008735,
    -1.582553,
    -0.1837941,
    0.3743639,
    -0.3104571,
    0.088068284,
    -0.013354295,
    0.059390895,
    -0.3207609,
    -0.107169926,
    -0.08228968,
    0.5358237,
    0.44925112,
    0.23764019,
    -0.1430225,
    -0.2144347,
    -0.30471936,
    -0.1294196,
    -0.21403168,
    0.1041042,
    -0.7026703,
    -0.76369435,
    -0.37405995,
    -0.6519631,
    0.42390987,
    2.5393202,
    0.010405977,
    -0.32847533,
    -0.12604631,
    0.24632168,
    0.7008203,
    0.871565,
    -0.364465,
    -0.3894656,
    -0.3508605,
    -0.31470755,
    -0.39517722,
    -0.004624721,
    -0.18303542,
    -0.15095112,
    0.43994075,
    0.9100199,
    0.2127615,
    -0.20145042,
    0.35941297,
    -0.09956937,
    -0.032346975,
    0.29212615,
    0.5807908,
    0.3127314,
    -0.12163658,
    -0.4611267,
    -0.627292,
    -0.4485208,
    -0.19533093,
    0.05768798,
    -0.97019726,
    -0.8174627,
    -0.54627514,
    0.37501892,
    1.1080246,
    1.8638362,
    0.6181789,
    0.38829112,
    0.5508317,
    0.11735546,
    -0.6732718,
    0.5501158,
    0.4277499,
    -0.4249444,
    -0.15304594,
    0.17495473,
    0.5679674,
    -0.16238178,
    1.8022643,
    0.21551436,
    0.909363,
    -0.1718178,
    -0.17205784,
    -0.36821383,
    0.5581779,
    0.969167,
    1.3091297,
    -0.11529676,
    -0.17919354,
    -0.20850922,
    2.225231,
    -0.10687793,
    3.6369014,
    3.4426377,
    0.78330356,
    -3.5114245,
    -1.7075514,
    0.80158925,
    1.312727,
    0.4500065,
    0.439345,
    0.10960357,
    0.4017232,
    -0.6793002,
    -0.24238779,
    -0.11289271,
    0.8514472,
    -0.3923625,
    -0.7221379,
    -1.1734751,
    -1.1508085,
    -1.3057183,
    0.5195515,
    0.02855351,
    0.029699016,
    -0.09886798,
    -0.014705746,
    -0.04652669,
    -0.0034710462,
    -0.27228755,
    0.0067397184,
    0.39228526,
    -0.42899114,
    -0.31295443,
    -0.12995012,
    0.68120915,
    0.99590683,
    3.4877713,
];
